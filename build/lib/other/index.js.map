{"version":3,"file":"index.js","sources":["../../../src/lib/other/caputured.js","../../../src/lib/other/descartes.js","../../../src/lib/other/nestedHandler.js","../../../src/lib/other/simplifyProcess.js","../../../src/lib/other/superSimplify.js"],"sourcesContent":["/**\n * @description: 捕获函数\n * @param {*}\n * @return {*}\n */\n\nexport default async function caputured (asyncFunc, ...args) {\n    try {\n      const res = await asyncFunc(...args)\n      return { err: null, res, args }\n    } catch (err) {\n      return { err, res: null, args }\n    }\n}\n","\n/**\n * 笛卡尔积组装\n * @param {Array} list\n * @returns []\n */\nexport default function descartes(list) {\n    // parent 上一级索引;count 指针计数\n    let point = {}; // 准备移动指针\n    let result = []; // 准备返回数据\n    let pIndex = null; // 准备父级指针\n    let tempCount = 0; // 每层指针坐标\n    let temp = []; // 组装当个 sku 结果\n  \n    // 一：根据参数列生成指针对象\n    for (let index in list) {\n      if (typeof list[index] === 'object') {\n        point[index] = { parent: pIndex, count: 0 };\n        pIndex = index;\n      }\n    }\n  \n    // 单维度数据结构直接返回\n    if (pIndex === null) {\n      return list;\n    }\n  \n    // 动态生成笛卡尔积\n    while (true) {\n      // 二：生成结果\n      let index;\n      for (index in list) {\n        tempCount = point[index].count;\n        temp.push(list[index][tempCount]);\n      }\n      // 压入结果数组\n      result.push(temp);\n      temp = [];\n  \n      // 三：检查指针最大值问题，移动指针\n      while (true) {\n        if (point[index].count + 1 >= list[index].length) {\n          point[index].count = 0;\n          pIndex = point[index].parent;\n          if (pIndex === null) {\n            return result;\n          }\n          // 赋值 parent 进行再次检查\n          index = pIndex;\n        } else {\n          point[index].count++;\n          break;\n        }\n      }\n    }\n  }\n  \n  /**\nconst colors = ['红','黄','绿']\nconst sizes = [1,2,3]\nconst others = ['a','b','c'] \ndescartes([colors,sizes,others])\n   * \n   * \n   * \n   */","/*\r\n * @Author: your name\r\n * @Date: 2021-10-12 15:19:37\r\n * @LastEditTime: 2021-10-12 15:22:10\r\n * @LastEditors: Please set LastEditors\r\n * @Description: In User Settings Edit\r\n * @FilePath: \\util\\src\\lib\\extend\\nestedHandler.js\r\n */\r\n\r\n/**\r\n * @description: 解决多重嵌套条件业务\r\n * @param {Array} mapArr: 数组\r\n * @param {Function} cb\r\n * @param {Function} othoer\r\n */\r\nexport default function nestedHandler(mapArr, cb, othoer){\r\n    const action = mapArr.find(cb)\r\n    action ? action[1]() : othoer && othoer()\r\n}\r\n\r\n\r\n/**\r\n * \r\nconst orderType = 1 // 1: 美妆，2：电器，3：家具\r\nconst orderWay = 1 // 1：h5，2：app，3：小程序\r\n\r\nif (orderType === 1) {\r\n  if (orderWay === 1) {\r\n    console.log('美妆订单h5')\r\n  } else if (orderWay === 2) {\r\n    console.log('美妆订单app')\r\n  } else if (orderWay === 3) {\r\n    console.log('美妆订单小程序')\r\n  }\r\n} else if (orderType === 2) {\r\n  if (orderWay === 1) {\r\n    console.log('电器订单h5')\r\n  } else if (orderWay === 2) {\r\n    console.log('电器订单app')\r\n  } else if (orderWay === 3) {\r\n    console.log('电器订单小程序')\r\n  }\r\n} else if (orderType === 3) {\r\n  if (orderWay === 1) {\r\n    console.log('家具订单h5')\r\n  } else if (orderWay === 2) {\r\n    console.log('家具订单app')\r\n  } else if (orderWay === 3) {\r\n    console.log('家具订单小程序')\r\n  }\r\n}\r\n * \r\n * \r\n * \r\n */\r\n\r\n/**\r\n * \r\n const mapArr = [\r\n      [\r\n          {\r\n              orderType: 1,\r\n              orderWay: 1\r\n          },\r\n          () => {\r\n              console.log('美妆订单h5')\r\n          }\r\n      ],\r\n      [\r\n          {\r\n              orderType: 1,\r\n              orderWay: 2\r\n          },\r\n          () => {\r\n              console.log('美妆订单app')\r\n          }\r\n      ],\r\n      [\r\n          {\r\n              orderType: 1,\r\n              orderWay: 3\r\n          },\r\n          () => {\r\n              console.log('美妆订单小程序')\r\n          }\r\n      ],\r\n      [\r\n          {\r\n              orderType: 2,\r\n              orderWay: 1\r\n          },\r\n          () => {\r\n              console.log('电器订单h5')\r\n          }\r\n      ],\r\n      [\r\n          {\r\n              orderType: 2,\r\n              orderWay: 2\r\n          },\r\n          () => {\r\n              console.log('电器订单app')\r\n          }\r\n      ],\r\n      [\r\n          {\r\n              orderType: 2,\r\n              orderWay: 3\r\n          },\r\n          () => {\r\n              console.log('电器订单小程序')\r\n          }\r\n      ],\r\n      [\r\n          {\r\n              orderType: 3,\r\n              orderWay: 1\r\n          },\r\n          () => {\r\n              console.log('家具订单h5')\r\n          }\r\n      ],\r\n      [\r\n          {\r\n              orderType: 3,\r\n              orderWay: 2\r\n          },\r\n          () => {\r\n              console.log('家具订单app')\r\n          }\r\n      ],\r\n      [\r\n          {\r\n              orderType: 3,\r\n              orderWay: 3\r\n          },\r\n          () => {\r\n              console.log('家具订单小程序')\r\n          }\r\n      ]\r\n  ]\r\n\r\nconst nestedHandler = (mapArr, cb, othoer) => {\r\n    const action = mapArr.find(cb)\r\n    action ? action[1]() : othoer && othoer()\r\n}\r\nconst orderType = 1 // 1: 美妆，2：电器，3：家具\r\nconst orderWay = 1 // 1：h5，2：app，3：小程序\r\n// 自定义条件\r\nnestedHandler(\r\n    mapArr,\r\n    ([key]) => {\r\n        return key.orderType === orderType && key.orderWay === orderWay\r\n    },\r\n    () => {\r\n        console.log('没有找到久执行这个方法')\r\n    }\r\n)\r\n\r\n * \r\n * \r\n */","/*\r\n * @Author: your name\r\n * @Date: 2022-04-09 17:44:36\r\n * @LastEditTime: 2022-04-09 17:44:36\r\n * @LastEditors: Please set LastEditors\r\n * @Description: 打开koroFileHeader查看配置 进行设置: https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE\r\n * @FilePath: \\rutils\\src\\lib\\other\\simplifyProcess.js\r\n */\r\n/*\r\n * @Author: your name\r\n * @Date: 2021-10-12 14:33:50\r\n * @LastEditTime: 2021-10-26 18:37:07\r\n * @LastEditors: Please set LastEditors\r\n * @Description: In User Settings Edit\r\n * @FilePath: \\util\\src\\lib\\extend\\simplify.js\r\n */\r\n/**\r\n * @description: 简化流程函数 -  状态映射值\r\n * @param { Object } o：对象（必填） { '[\"key2\"]': () => {}, '[\"key4\"]': () => {} }\r\n * @param { Number | String } s：状态值（必填），如 数字、字符串\r\n * @param { Function } d：默认处理（非必填）\r\n */\r\nexport default function simplifyProcess(o, s, d){\r\n    // 查询是否能找到对应的key\r\n    const k = Object.keys(o).find(k => JSON.parse(k).includes(s))\r\n\r\n    // 如果查找到 并且 其对应的值是字符串，那么直接返回该字符串\r\n    if(typeof o[k] ==='string')return o[k]\r\n    // 如果查找到 并且 其对应的值是函数，那么直接执行\r\n    if(typeof o[k] === 'function')return o[k]()\r\n\r\n    // 如果没有查找到并且 默认d是字符串，那么就返回默认d值\r\n    if(!o[k] && d && typeof d ==='string')return d\r\n    // 如果没有查找到并且 默认d是函数，那么就直接执行\r\n    if(!o[k] && d && typeof d === 'function') return d()\r\n}\r\n// { '[\"key2\"]': () => {}, '[\"key4\"]': () => {} }","/*\n * @Author: your name\n * @Date: 2022-04-09 17:44:44\n * @LastEditTime: 2022-04-09 17:44:45\n * @LastEditors: Please set LastEditors\n * @Description: 打开koroFileHeader查看配置 进行设置: https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE\n * @FilePath: \\rutils\\src\\lib\\other\\superSimplify.js\n */\n\n /**\n  * @description: 多重条件简化函数\n  * @param {Object} o：按规则传入的对象\n  * @param {Object} c：条件对象\n  * @param {String| Function} d：没有匹配到的备用值或是函数\n  */\n const superSimplify = function(o,c,d){\n     const keys = Object.keys(o)\n     if(!keys.length) throw Error('不接受空对象')\n     const index = keys.findIndex(i=>JSON.stringify(JSON.parse(i)) === JSON.stringify(c))\n     const val = o[keys[index]]\n     if(typeof val === 'string')return val\n     if(typeof val === 'function')return val()\n     if(!val && typeof d === 'string')return d\n     if(!val && typeof d === 'function')return d()\n }\n \n export default superSimplify\n\n\n\n/*\n\n const type2 = {\n    '{\"a\":1,\"b\":1,\"c\":1}':()=>{\n         console.log(\"a1b1c1\")\n     },\n     [JSON.stringify({\n         a:1,b:1,c:2\n     })]:()=>{\n         console.log(\"a1b1c2\")\n     }\n }\n\nsuperSimplify(type2,{a:1 ,b:1,c:11},'8888')\n\n*/"],"names":["asyncFunc","args","res","err","list","tempCount","index","point","result","pIndex","temp","_typeof","parent","count","push","length","mapArr","cb","othoer","action","find","o","s","d","k","Object","keys","JSON","parse","includes","c","Error","findIndex","i","stringify","val"],"mappings":"olBAMe,WAA0BA,yHAAcC,mCAAAA,qCAE/BD,eAAaC,iBAAzBC,2BACC,CAAEC,IAAK,KAAMD,IAAAA,EAAKD,KAAAA,6DAElB,CAAEE,SAAKD,IAAK,KAAMD,KAAAA,oUCLhB,SAAmBG,OAK1BC,EAIKC,EAPLC,EAAQ,GACRC,EAAS,GACTC,EAAS,KAETC,EAAO,OAGFJ,KAASF,EACW,WAAvBO,EAAOP,EAAKE,MACdC,EAAMD,GAAS,CAAEM,OAAQH,EAAQI,MAAO,GACxCJ,EAASH,MAKE,OAAXG,SACKL,SAII,KAEPE,aACCA,KAASF,EACZC,EAAYE,EAAMD,GAAOO,MACzBH,EAAKI,KAAKV,EAAKE,GAAOD,QAGxBG,EAAOM,KAAKJ,GACZA,EAAO,KAGM,MACPH,EAAMD,GAAOO,MAAQ,GAAKT,EAAKE,GAAOS,QAQnC,CACLR,EAAMD,GAAOO,iBARbN,EAAMD,GAAOO,MAAQ,EAEN,QADfJ,EAASF,EAAMD,GAAOM,eAEbJ,EAGTF,EAAQG,qBCjCH,SAAuBO,EAAQC,EAAIC,IACxCC,EAASH,EAAOI,KAAKH,IAClBE,EAAO,KAAOD,GAAUA,uBCKtB,SAAyBG,EAAGC,EAAGC,OAEpCC,EAAIC,OAAOC,KAAKL,GAAGD,KAAK,SAAAI,UAAKG,KAAKC,MAAMJ,GAAGK,SAASP,WAGxC,iBAARD,EAAEG,GAAsBH,EAAEG,GAEjB,mBAATH,EAAEG,GAAyBH,EAAEG,MAGnCH,EAAEG,IAAMD,GAAiB,iBAALA,EAAqBA,GAEzCF,EAAEG,IAAMD,GAAkB,mBAANA,EAAyBA,4BCnB9B,SAASF,EAAES,EAAEP,OACzBG,EAAOD,OAAOC,KAAKL,OACrBK,EAAKX,OAAQ,MAAMgB,MAAM,cACvBzB,EAAQoB,EAAKM,UAAU,SAAAC,UAAGN,KAAKO,UAAUP,KAAKC,MAAMK,MAAQN,KAAKO,UAAUJ,KAC3EK,EAAMd,EAAEK,EAAKpB,UACD,iBAAR6B,EAAwBA,EAChB,mBAARA,EAA0BA,IAChCA,GAAoB,iBAANZ,EACdY,GAAoB,mBAANZ,SAAwBA,IADFA"}