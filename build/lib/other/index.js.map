{"version":3,"file":"index.js","sources":["../../../src/lib/other/caputured.js","../../../src/lib/other/descartes.js","../../../src/lib/other/nestedHandler.js","../../../src/lib/other/simplify.js","../../../src/lib/other/simplifyFunc.js"],"sourcesContent":["/**\r\n * @description: 捕获函数\r\n * @param {*}\r\n * @return {*}\r\n */\r\n\r\nexport default async function caputured (asyncFunc, ...args) {\r\n    try {\r\n      const res = await asyncFunc(...args)\r\n      return { err: null, res, args }\r\n    } catch (err) {\r\n      return { err, res: null, args }\r\n    }\r\n}\r\n","\r\n/**\r\n * 笛卡尔积组装\r\n * @param {Array} list\r\n * @returns []\r\n */\r\nexport default function descartes(list) {\r\n    // parent 上一级索引;count 指针计数\r\n    let point = {}; // 准备移动指针\r\n    let result = []; // 准备返回数据\r\n    let pIndex = null; // 准备父级指针\r\n    let tempCount = 0; // 每层指针坐标\r\n    let temp = []; // 组装当个 sku 结果\r\n  \r\n    // 一：根据参数列生成指针对象\r\n    for (let index in list) {\r\n      if (typeof list[index] === 'object') {\r\n        point[index] = { parent: pIndex, count: 0 };\r\n        pIndex = index;\r\n      }\r\n    }\r\n  \r\n    // 单维度数据结构直接返回\r\n    if (pIndex === null) {\r\n      return list;\r\n    }\r\n  \r\n    // 动态生成笛卡尔积\r\n    while (true) {\r\n      // 二：生成结果\r\n      let index;\r\n      for (index in list) {\r\n        tempCount = point[index].count;\r\n        temp.push(list[index][tempCount]);\r\n      }\r\n      // 压入结果数组\r\n      result.push(temp);\r\n      temp = [];\r\n  \r\n      // 三：检查指针最大值问题，移动指针\r\n      while (true) {\r\n        if (point[index].count + 1 >= list[index].length) {\r\n          point[index].count = 0;\r\n          pIndex = point[index].parent;\r\n          if (pIndex === null) {\r\n            return result;\r\n          }\r\n          // 赋值 parent 进行再次检查\r\n          index = pIndex;\r\n        } else {\r\n          point[index].count++;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\nconst colors = ['红','黄','绿']\r\nconst sizes = [1,2,3]\r\nconst others = ['a','b','c'] \r\ndescartes([colors,sizes,others])\r\n   * \r\n   * \r\n   * \r\n   */","/*\r\n * @Author: your name\r\n * @Date: 2021-10-12 15:19:37\r\n * @LastEditTime: 2021-10-12 15:22:10\r\n * @LastEditors: Please set LastEditors\r\n * @Description: In User Settings Edit\r\n * @FilePath: \\util\\src\\lib\\extend\\nestedHandler.js\r\n */\r\n\r\n/**\r\n * @description: 解决多重嵌套条件业务\r\n * @param {Array} mapArr: 数组\r\n * @param {Function} cb\r\n * @param {Function} othoer\r\n */\r\nexport default function nestedHandler(mapArr, cb, othoer){\r\n    const action = mapArr.find(cb)\r\n    action ? action[1]() : othoer && othoer()\r\n}\r\n\r\n\r\n/**\r\n * \r\nconst orderType = 1 // 1: 美妆，2：电器，3：家具\r\nconst orderWay = 1 // 1：h5，2：app，3：小程序\r\n\r\nif (orderType === 1) {\r\n  if (orderWay === 1) {\r\n    console.log('美妆订单h5')\r\n  } else if (orderWay === 2) {\r\n    console.log('美妆订单app')\r\n  } else if (orderWay === 3) {\r\n    console.log('美妆订单小程序')\r\n  }\r\n} else if (orderType === 2) {\r\n  if (orderWay === 1) {\r\n    console.log('电器订单h5')\r\n  } else if (orderWay === 2) {\r\n    console.log('电器订单app')\r\n  } else if (orderWay === 3) {\r\n    console.log('电器订单小程序')\r\n  }\r\n} else if (orderType === 3) {\r\n  if (orderWay === 1) {\r\n    console.log('家具订单h5')\r\n  } else if (orderWay === 2) {\r\n    console.log('家具订单app')\r\n  } else if (orderWay === 3) {\r\n    console.log('家具订单小程序')\r\n  }\r\n}\r\n * \r\n * \r\n * \r\n */\r\n\r\n/**\r\n * \r\n const mapArr = [\r\n      [\r\n          {\r\n              orderType: 1,\r\n              orderWay: 1\r\n          },\r\n          () => {\r\n              console.log('美妆订单h5')\r\n          }\r\n      ],\r\n      [\r\n          {\r\n              orderType: 1,\r\n              orderWay: 2\r\n          },\r\n          () => {\r\n              console.log('美妆订单app')\r\n          }\r\n      ],\r\n      [\r\n          {\r\n              orderType: 1,\r\n              orderWay: 3\r\n          },\r\n          () => {\r\n              console.log('美妆订单小程序')\r\n          }\r\n      ],\r\n      [\r\n          {\r\n              orderType: 2,\r\n              orderWay: 1\r\n          },\r\n          () => {\r\n              console.log('电器订单h5')\r\n          }\r\n      ],\r\n      [\r\n          {\r\n              orderType: 2,\r\n              orderWay: 2\r\n          },\r\n          () => {\r\n              console.log('电器订单app')\r\n          }\r\n      ],\r\n      [\r\n          {\r\n              orderType: 2,\r\n              orderWay: 3\r\n          },\r\n          () => {\r\n              console.log('电器订单小程序')\r\n          }\r\n      ],\r\n      [\r\n          {\r\n              orderType: 3,\r\n              orderWay: 1\r\n          },\r\n          () => {\r\n              console.log('家具订单h5')\r\n          }\r\n      ],\r\n      [\r\n          {\r\n              orderType: 3,\r\n              orderWay: 2\r\n          },\r\n          () => {\r\n              console.log('家具订单app')\r\n          }\r\n      ],\r\n      [\r\n          {\r\n              orderType: 3,\r\n              orderWay: 3\r\n          },\r\n          () => {\r\n              console.log('家具订单小程序')\r\n          }\r\n      ]\r\n  ]\r\n\r\nconst nestedHandler = (mapArr, cb, othoer) => {\r\n    const action = mapArr.find(cb)\r\n    action ? action[1]() : othoer && othoer()\r\n}\r\nconst orderType = 1 // 1: 美妆，2：电器，3：家具\r\nconst orderWay = 1 // 1：h5，2：app，3：小程序\r\n// 自定义条件\r\nnestedHandler(\r\n    mapArr,\r\n    ([key]) => {\r\n        return key.orderType === orderType && key.orderWay === orderWay\r\n    },\r\n    () => {\r\n        console.log('没有找到久执行这个方法')\r\n    }\r\n)\r\n\r\n * \r\n * \r\n */","/**\n * @description: 简化流程函数 -  状态映射值\n * @param { Object } o：对象（必填） { '[\"key2\"]': () => {}, '[\"key4\"]': () => {} }\n * @param { Number | String } s：状态值（必填），如 数字、字符串\n * @param { Function } d：默认处理（非必填）\n */\nexport default function simplify(o, s, d){\n    // 查询是否能找到对应的key\n    const k = Object.keys(o).find(k => JSON.parse(k).includes(s))\n\n    // 如果查找到 并且 其对应的值是字符串，那么直接返回该字符串\n    if(typeof o[k] ==='string')return o[k]\n    // 如果查找到 并且 其对应的值是函数，那么直接执行\n    if(typeof o[k] === 'function')return o[k]()\n\n    // 如果没有查找到并且 默认d是字符串，那么就返回默认d值\n    if(!o[k] && d && typeof d ==='string')return d\n    // 如果没有查找到并且 默认d是函数，那么就直接执行\n    if(!o[k] && d && typeof d === 'function') return d()\n}\n// { '[\"key2\"]': () => {}, '[\"key4\"]': () => {} }"," /** @description: 简化函数 对象key为对象字符串\n * @param { Object } o: 对象 map\n * @param { Object } c ：条件对象\n * @param { String | Function } d ：没有匹配到 给的默认值 或是 执行的默认函数\n */\nexport default function simplifyFunc(o, c, d) {\n  // 获取o对象所有keys\n  const keys = Object.keys(o)\n  // 如果对象没有属性，抛错\n  if (!keys.length) throw Error('不接受空对象')\n  // 查询 条件c对象在 keys数组中的索引\n  const index = keys.findIndex((i) => JSON.stringify(JSON.parse(i)) === JSON.stringify(c))\n  // 获取 条件对应的 值\n  const val = o[keys[index]]\n  // 如果值是字符串，直接返回\n  if (typeof val === 'string') return val\n  // 如果值是函数，直接返回执行的结果\n  if (typeof val === 'function') return val()\n  // 如果值不存在，默认值d是字符串，直接返回默认值d\n  if (!val && typeof d === 'string') return d\n  // 如果值不存在，默认值d是函数，直接返回默认函数的执行结果\n  if (!val && typeof d === 'function') return d()\n}\n/*\n\n const type2 = {\n    '{\"a\":1,\"b\":1,\"c\":1}':()=>{\n         console.log(\"a1b1c1\")\n     },\n     [JSON.stringify({\n         a:1,b:1,c:2\n     })]:()=>{\n         console.log(\"a1b1c2\")\n     }\n }\n\nsuperSimplify(type2,{a:1 ,b:1,c:11},'8888')\n\n*/"],"names":["asyncFunc","args","res","err","list","tempCount","index","point","result","pIndex","temp","_typeof","parent","count","push","length","mapArr","cb","othoer","action","find","o","s","d","k","Object","keys","JSON","parse","includes","c","Error","findIndex","i","stringify","val"],"mappings":"8nBAMe,WAA0BA,yHAAcC,mCAAAA,qCAE/BD,eAAaC,iBAAzBC,2BACC,CAAEC,IAAK,KAAMD,IAAAA,EAAKD,KAAAA,6DAElB,CAAEE,SAAKD,IAAK,KAAMD,KAAAA,oUCLhB,SAAmBG,OAK1BC,EAIKC,EAPLC,EAAQ,GACRC,EAAS,GACTC,EAAS,KAETC,EAAO,OAGFJ,KAASF,EACW,WAAvBO,EAAOP,EAAKE,MACdC,EAAMD,GAAS,CAAEM,OAAQH,EAAQI,MAAO,GACxCJ,EAASH,MAKE,OAAXG,SACKL,SAII,KAEPE,aACCA,KAASF,EACZC,EAAYE,EAAMD,GAAOO,MACzBH,EAAKI,KAAKV,EAAKE,GAAOD,QAGxBG,EAAOM,KAAKJ,GACZA,EAAO,KAGM,MACPH,EAAMD,GAAOO,MAAQ,GAAKT,EAAKE,GAAOS,QAQnC,CACLR,EAAMD,GAAOO,iBARbN,EAAMD,GAAOO,MAAQ,EAEN,QADfJ,EAASF,EAAMD,GAAOM,eAEbJ,EAGTF,EAAQG,qBCjCH,SAAuBO,EAAQC,EAAIC,IACxCC,EAASH,EAAOI,KAAKH,IAClBE,EAAO,KAAOD,GAAUA,gBCXtB,SAAkBG,EAAGC,EAAGC,OAE7BC,EAAIC,OAAOC,KAAKL,GAAGD,KAAK,SAAAI,UAAKG,KAAKC,MAAMJ,GAAGK,SAASP,WAGxC,iBAARD,EAAEG,GAAsBH,EAAEG,GAEjB,mBAATH,EAAEG,GAAyBH,EAAEG,MAGnCH,EAAEG,IAAMD,GAAiB,iBAALA,EAAqBA,GAEzCF,EAAEG,IAAMD,GAAkB,mBAANA,EAAyBA,2BCbtC,SAAsBF,EAAGS,EAAGP,OAEnCG,EAAOD,OAAOC,KAAKL,OAEpBK,EAAKX,OAAQ,MAAMgB,MAAM,cAExBzB,EAAQoB,EAAKM,UAAU,SAACC,UAAMN,KAAKO,UAAUP,KAAKC,MAAMK,MAAQN,KAAKO,UAAUJ,WAIlE,iBAFbK,EAAMd,EAAEK,EAAKpB,KAEiB6B,EAEjB,mBAARA,EAA2BA,IAEjCA,GAAoB,iBAANZ,EAEdY,GAAoB,mBAANZ,SAAyBA,IAFFA"}