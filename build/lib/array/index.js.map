{"version":3,"file":"index.js","sources":["../../../src/lib/base/isEquals.js","../../../src/lib/array/index.js","../../../src/lib/array/union.js","../../../src/lib/array/intersection.js","../../../src/lib/array/archive.js","../../../src/lib/array/arrayFill.js","../../../src/lib/array/arrayToObject.js","../../../src/lib/array/arrayToTree.js","../../../src/lib/array/delBy.js","../../../src/lib/array/except.js","../../../src/lib/array/exchangePostion.js","../../../src/lib/array/flatten.js","../../../src/lib/array/group.js","../../../src/lib/array/indexOfAll.js","../../../src/lib/array/insetPostion.js","../../../src/lib/array/isRepeat.js","../../../src/lib/array/mean.js","../../../src/lib/array/range.js","../../../src/lib/array/rangeRandom.js","../../../src/lib/array/rangeScopeStartZore.js","../../../src/lib/array/rangeStep.js","../../../src/lib/array/sample.js","../../../src/lib/array/sum.js","../../../src/lib/array/timesTotal.js","../../../src/lib/array/unique.js","../../../src/lib/array/make.js","../../../src/lib/array/pick.js","../../../src/lib/array/getTreeNode.js"],"sourcesContent":["/**\r\n * @param {any} a：比较的值\r\n * @param {any} b：其他要比较的值\r\n */\r\nconst isEquals = function (a, b) {\r\n    if (a === b) return true\r\n    if (a instanceof Date && b instanceof Date) return a.getTime() === b.getTime()\r\n    if (!a || !b || (typeof a !== 'object' && typeof b !== 'object')) return a === b\r\n    if (a.prototype !== b.prototype) return false\r\n    let keys = Object.keys(a)\r\n    if (keys.length !== Object.keys(b).length) return false\r\n    let type = o => Object.prototype.toString.call(o).slice(8, -1)\r\n    return ((Array.isArray(a) && Array.isArray(b)) || (type(a) == 'Object' && type(b) == 'Object')) && keys.every(k => isEquals(a[k], b[k]))\r\n}\r\nexport default isEquals\r\n","import archive from './archive'\r\nimport arrayFill from './arrayFill'\r\nimport arrayToObject from './arrayToObject'\r\nimport arrayToTree from './arrayToTree'\r\nimport delBy from './delBy'\r\nimport except from './except'\r\nimport exchangePostion from './exchangePostion'\r\nimport flatten from './flatten'\r\nimport group from './group'\r\nimport indexOfAll from './indexOfAll'\r\nimport insetPostion from './insetPostion'\r\nimport intersection from './intersection'\r\nimport mean from './mean'\r\nimport range from './range'\r\nimport rangeRandom from './rangeRandom'\r\nimport rangeScopeStartZore from './rangeScopeStartZore'\r\nimport rangeStep from './rangeStep'\r\nimport sample from './sample'\r\nimport sum from './sum'\r\nimport timesTotal from './timesTotal'\r\nimport unique from './unique'\r\nimport union from './union'\r\nimport isRepeat from './isRepeat'\r\nimport pick from './pick'\r\nimport make from './make'\r\nimport getTreeNode from './getTreeNode'\r\n\r\n/**\r\n * 数组\r\n */\r\nexport default {\r\n    union,\r\n    intersection,\r\n    archive,\r\n    arrayFill,\r\n    arrayToObject,\r\n    arrayToTree,\r\n    delBy,\r\n    except,\r\n    exchangePostion,\r\n    flatten,\r\n    group,\r\n    indexOfAll,\r\n    insetPostion,\r\n    isRepeat,\r\n    mean,\r\n    range,\r\n    rangeRandom,\r\n    rangeScopeStartZore,\r\n    rangeStep,\r\n    sample,\r\n    sum,\r\n    timesTotal,\r\n    unique,\r\n    make,\r\n    pick,\r\n    getTreeNode\r\n}\r\n","/**\r\n * @description: 求数组并集\r\n * @param  {Array} a ：传入的数组a\r\n * @param  {Array} b ：传入的数组b\r\n * @return {Array} 两数组的并集\r\n * \r\n * \r\n * \r\n * \r\n * // 场景1：\r\nlet a = [1, 2, 3, 4, 5]\r\nlet b = [1, 2, 4, 5, 6]\r\n\r\nunion(a, b) //[1,2,3,4,5,6]\r\n\r\n// 场景2：\r\nlet a1 = [\r\n    { id: 1, name: '张三', age: 20 },\r\n    { id: 2, name: '李四', age: 21 },\r\n    { id: 3, name: '小二', age: 23 }\r\n]\r\nlet b1 = [\r\n    { id: 2, name: '李四', age: 21 },\r\n    { id: 4, name: '小明', age: 24 },\r\n    { id: 5, name: '小红', age: 25 }\r\n]\r\n\r\n// 通过 id 获取并集\r\n\r\nunion(a1, b1, 'id')\r\n\r\n\r\n[\r\n  {id: 1, name: \"张三\", age: 20}\r\n  {id: 2, name: \"李四\", age: 21}\r\n  {id: 3, name: \"小二\", age: 23}\r\n  {id: 4, name: \"小明\", age: 24}\r\n  {id: 5, name: \"小红\", age: 25}\r\n]\r\n * \r\n * \r\n */\r\n\r\nconst union = function (a, b, k) {\r\n    return a.concat(b.filter(i => (k ? !a.map(i => i[k]).includes(i[k]) : !a.includes(i))))\r\n}\r\n\r\nexport default union\r\n","/**\r\n * @description: 求数组交集\r\n * @param  {Array} a ：传入的数组a\r\n * @param  {Array} b ：传入的数组b\r\n * @return {Array} 两数组的交集\r\n * \r\n * \r\n * \r\n * \r\n// 场景1：\r\nlet a = [1, 2, 3, 4, 5]\r\nlet b = [1, 2, 4, 5, 6]\r\n\r\nintersection(a, b) // [1,2,4,5]\r\n\r\n// 场景2：\r\nlet a1 = [\r\n    { id: 1, name: '张三', age: 20 },\r\n    { id: 2, name: '李四', age: 21 },\r\n    { id: 3, name: '小二', age: 23 }\r\n]\r\nlet b1 = [\r\n    { id: 2, name: '李四', age: 21 },\r\n    { id: 4, name: '小明', age: 24 },\r\n    { id: 5, name: '小红', age: 25 }\r\n]\r\n\r\nintersection(a1, b1, 'id') //[ { id: 2, name: '李四', age: 21 }]\r\n * \r\n * \r\n * \r\n */\r\nconst intersection = function (a, b, k) {\r\n    return a.filter(t => (k ? b.map(i => i[k]).includes(t[k]) : b.includes(t)))\r\n}\r\nexport default intersection\r\n","/**\r\n * @description: 对一维 json 数组进行归档（根据 key）\r\n * @param {Array} arr:一维数组\r\n * @param {String} key：key 字符串\r\n */\r\nconst archive = function (arr, key) {\r\n    return Array.from(new Set(arr.map(i => i[key]))).reduce((p, c) => (p.push(arr.filter(i => i[key] === c)), p), [])\r\n}\r\nexport default archive\r\n\r\n/***\r\n *\r\n * 示例：\r\n *\r\n * let books = [ {date:'1月',name:'地理书'}, {date:'1月',name:'历史书'}, {date:'2月',name:'化学书'} ]\r\n *\r\n * archive( books, 'date') // [[{date:'1月',name:'地理书'},{date:'1月',name:'历史书'}],[ {date:'2月',name:'化学书'}]]\r\n *\r\n *\r\n */\r\n","/**\r\n * @description: 生成一个指定长度 每个值都填充为统一的 指定值\r\n * @param {Number} len ：数组长度\r\n * @param {any} o：填充的值\r\n */\r\nconst arrayFill = function (len, o) {\r\n    return Array(len).fill(o)\r\n}\r\nexport default arrayFill\r\n\r\n/**\r\n * 示例：\r\n *\r\n * generate(5,1) // [1,1,1,1,1]\r\n * generate(3,{name:''}) // [{name:''},{name:''},{name:''}]\r\n *\r\n */\r\n","/**\r\n * @description: 数组转树\r\n * @param {Array} arr ：数组\r\n */\r\nconst arrayToObject = function (arr) {\r\n    return Array.from(arr.entries()).reduce((p, c) => ((p[c[0]] = c[1]), p), {})\r\n}\r\nexport default arrayToObject\r\n/**\r\n * 示例：\r\n *\r\n * let arr = [\"a\", \"b\", \"c\"];\r\n * arrayToObject(arr) // {0: \"a\", 1: \"b\", 2: \"c\"}\r\n *\r\n *\r\n */\r\n","/**\r\n * @description: 数组转树\r\n * @param {Array} arr：需要转树的json数组\r\n * @param {Number | string} id：树节点 id\r\n * @param {String} link：父id\r\n */\r\nconst arrayToTree = function (arr, id = null, link = 'pid') {\r\n    return arr.filter(i => i[link] === id).map(i => ({ ...i, children: arrayToTree(arr, i.id, link) }))\r\n}\r\nexport default arrayToTree\r\n","/**\r\n * @description: 根据条件删除数组中的值\r\n * @param {Array} arr：被操作的数组\r\n * @param {any} o：条件\r\n * @param {Boolean} isChangeOldArr：是否改变原数组\r\n * @return {Array} 返回处理后的数组\r\n */\r\nconst delBy = function (arr, o, isChangeOldArr = false) {\r\n    let a = isChangeOldArr ? arr : JSON.parse(JSON.stringify(arr))\r\n    for (let i = a.length - 1; i >= 0; i--) {\r\n        if (typeof o === 'function') {\r\n            o(a[i]) && a.splice(i, 1)\r\n        } else if (Array.isArray(o)) {\r\n            o.indexOf(a[i]) > -1 && a.splice(i, 1)\r\n        } else if (a[i] === o) {\r\n            a.splice(i, 1)\r\n        } else if (Object.prototype.toString.call(o).slice(8, -1) === 'Object') {\r\n            let item = a[i]\r\n            for (let k in o) {\r\n                Array.isArray(o[k]) ? o[k].indexOf(item[k]) > -1 && a.splice(i, 1) : o[k] === item[k] && a.splice(i, 1)\r\n            }\r\n        }\r\n    }\r\n    return a\r\n}\r\nexport default delBy\r\n\r\n/**\r\n * 用法1：\r\n * let a1 = [1, 2, 3, 4, 5, 6]\r\n * delBy(a1, 2)// [1, 3, 4, 5, 6]\r\n * a1 // [1, 2, 3, 4, 5, 6]\r\n * let a1 = [1, 2, 3, 4, 5, 6]\r\n * delBy(a1, 2, true)// [1, 3, 4, 5, 6]\r\n * a1 // [1, 3, 4, 5, 6]\r\n *\r\n *\r\n *\r\n */\r\n\r\n/**\r\n * 用法2：\r\n * let a1 = [\r\n *   { id: 1, name: '罗老板', age: 18 },\r\n *   { id: 2, name: '帆老板', age: 19 },\r\n *   { id: 3, name: '全老板', age: 20 },\r\n *    { id: 2, name: '帆老板', age: 19 }\r\n * ]\r\n * // 删除 a1 数组中 id 为 2的值\r\n * delBy(a1, item => item.id === 2) //  等价于 handday.arr.delBy(a1, { id: 2 })\r\n * console.log(a1)\r\n * //\r\n * [\r\n *     { id: 1, name: '罗老板', age: 18 },\r\n *    { id: 3, name: '全老板', age: 20 },\r\n * ]\r\n *\r\n *\r\n *\r\n *\r\n *\r\n */\r\n\r\n/**\r\n * 用法3：\r\n *\r\n *\r\n * let a1 = [\r\n *    { id: 1, name: '罗老板', age: 18 },\r\n *     { id: 2, name: '帆老板', age: 19 },\r\n *     { id: 3, name: '全老板', age: 20 },\r\n *     { id: 2, name: '帆老板', age: 19 }\r\n * ]\r\n * // 删除 只要 id 是 1 或 2的值\r\n * delBy(a1, { id: [1, 2] })\r\n * console.log(a1)\r\n * //\r\n * [\r\n *     { id: 3, name: '全老板', age: 20 },\r\n * ]\r\n *\r\n *\r\n *\r\n */\r\n\r\n/**\r\n * 用法4：\r\n *\r\n *\r\n * let a1 = [\r\n *     { id: 1, name: '罗老板', age: 18 },\r\n *     { id: 2, name: '帆老板', age: 19 },\r\n *     { id: 3, name: '全老板', age: 20 },\r\n *     { id: 2, name: '帆老板', age: 19 }\r\n * ]\r\n * // 删除 a1 数组中 id值为 2，或 name值为 全老板  PS：注意是或的关系\r\n * delBy(a1, { id: 2, name: '全老板' })\r\n * console.log(a1)\r\n *\r\n *\r\n *\r\n *\r\n */\r\n\r\n/**\r\n * 用法5：\r\n *\r\n *\r\n * let a1 = [\r\n *     { id: 1, name: '罗老板', age: 18 },\r\n *     { id: 2, name: '帆老板', age: 19 },\r\n *     { id: 3, name: '全老板', age: 20 },\r\n *     { id: 2, name: '帆老板', age: 19 },\r\n *     { id: 4, name: '卫老板', age: 22 },\r\n *     { id: 5, name: '卓老板', age: 21 },\r\n *     { id: 6, name: '黄老板', age: 23 }\r\n * ]\r\n * // 只要 id值为 2 ，name值 是 全老板 或 卫老板，age值是23 ，对应的值都从数组中删除掉\r\n * delBy(a1, { id: 2, name: ['全老板', '卫老板'], age: 23 })\r\n * console.log(a1)\r\n * //\r\n * [\r\n * {id: 1, name: \"罗老板\", age: 18}\r\n * {id: 5, name: \"卓老板\", age: 21}\r\n * ]\r\n *\r\n *\r\n *\r\n */\r\n\r\n/***\r\n * 用法6：\r\n *\r\n * let a1 = [1, 2, 3, 4, 5, 2]\r\n * // 删除 给出的数组范围的值\r\n * delBy(a1, [2, 3, 4])\r\n * console.log(a1) //[1,5]\r\n *\r\n *\r\n *\r\n */\r\n","/**\r\n * @description: 求数组差集\r\n * @param  {Array} a ：传入的数组a\r\n * @param  {Array} b ：传入的数组b\r\n * @return {Array} 两数组的差集\r\n * \r\n * \r\n * \r\n * \r\nlet a = [1, 2, 3, 4, 5]\r\nlet b = [1, 2, 4, 5, 6]\r\n​\r\nexcept(a, b) // [3,6]\r\n​\r\nlet a1 = [\r\n    { id: 1, name: '张三', age: 20 },\r\n    { id: 2, name: '李四', age: 21 },\r\n    { id: 3, name: '小二', age: 23 }\r\n]\r\nlet b1 = [\r\n    { id: 2, name: '李四', age: 21 },\r\n    { id: 4, name: '小明', age: 24 },\r\n    { id: 5, name: '小红', age: 25 }\r\n]\r\n​\r\nexcept(a1, b1, 'id')\r\n\r\n[\r\n  {id: 1, name: \"张三\", age: 20}\r\n  {id: 3, name: \"小二\", age: 23}\r\n  {id: 4, name: \"小明\", age: 24}\r\n  {id: 5, name: \"小红\", age: 25}\r\n]\r\n\r\n * \r\n * \r\n * \r\n */\r\nconst except = function (a, b, k) {\r\n    return [...a, ...b].filter(i => ![a, b].every(t => (k ? t.map(i => i[k]).includes(i[k]) : t.includes(i))))\r\n}\r\nexport default except\r\n","/**\r\n * @description: 交换数组中任一两个值的位置\r\n * @param {Array} arr:数组\r\n * @param {Number} oldIndex：老位置索引\r\n * @param {Number} newIndex：新位置索引\r\n * @param {Boolean} isChangeOldArr: 是否改变原数组\r\n * @return {Array} 返回一个数组\r\n */\r\nconst exchangePostion = function (arr, oldIndex, newIndex, isChangeOldArr = false) {\r\n    let a = isChangeOldArr ? arr : JSON.parse(JSON.stringify(arr))\r\n    a.splice(oldIndex, 1, a.splice(newIndex, 1, a[oldIndex])[0])\r\n    return a\r\n}\r\nexport default exchangePostion\r\n\r\n/**\r\n *\r\n * 示例：\r\n *\r\n * let a1 = [1, 2, 3, 4, 5, 6]\r\n *\r\n * exchangePostion(a1, 4, 1)// [1, 5, 3, 4, 2, 6]\r\n *\r\n * a1 //[1, 2, 3, 4, 5, 6]\r\n *\r\n * let a1 = [1, 2, 3, 4, 5, 6]\r\n *\r\n * exchangePostion(a1, 4, 1，true)// [1, 5, 3, 4, 2, 6]\r\n *\r\n * a1 // [1, 5, 3, 4, 2, 6]\r\n *\r\n *\r\n *\r\n *\r\n *\r\n */\r\n","/**\r\n * 指定深度扁平化数组\r\n * @param {Array} arr :扁平化的数组\r\n * @param {Number} depth：扁平化的层级\r\n */\r\nconst flatten = function (arr, depth = 1) {\r\n    return arr.reduce((a, v) => a.concat(depth > 1 && Array.isArray(v) ? flatten(v, depth - 1) : v), [])\r\n}\r\nexport default flatten\r\n\r\n/**\r\n * 示例：\r\n *\r\n * flatten([1, 2, 3, [4, [5, 6, [7]]]]) //[1, 2, 3, 4, [5,6,[7]]]\r\n *\r\n * flatten([1, 2, 3, [4, [5, 6, [7]]]], 2) //[1, 2, 3, 4, 5,6,[7]]\r\n *\r\n *\r\n */\r\n","/**\r\n * @description: 一维数组转二维数组 (分组)\r\n * @param {Array} arr:数组\r\n * @param {Number} num: 平分基数（num 个为一组进行分组（归档））\r\n */\r\nconst group = function (arr, num) {\r\n    return [...Array(Math.ceil(arr.length / num)).keys()].reduce((p, _, i) => (p.push(arr.slice(i * num, (i + 1) * num)), p), [])\r\n}\r\nexport default group\r\n\r\n/**\r\n *\r\n * 示例：\r\n *\r\n * group([1,2,3,4,5,6,7,8,9,10],2) // [[1,2],[3,4],[5,6],[7,8],[9.10]]\r\n *\r\n * group([1,2,3,4,5,6,7,8,9,10],3) // [[1,2,3],[4,5,6],[7,8,9],[10]]\r\n *\r\n *\r\n *\r\n *\r\n *\r\n */\r\n","/**\r\n * 返回数组中某值的所有索引，数组形式返回\r\n * @param {Array} a:数组\r\n * @param {String} k: 键名\r\n * @param {String} v: 键值\r\n */\r\nconst indexOfAll = (a, k, v) => a.reduce((p, c, i) => ((v ? c[k] === v : c === k) ? [...p, i] : p), [])\r\n\r\nexport default indexOfAll\r\n\r\n/**\r\n * 示例：\r\n *\r\n *\r\n * let a1 = [\r\n *  { id: 1, name: '张三', age: 20, count: 100 },\r\n *  { id: 2, name: '李四', age: 21, count: 50 },\r\n *  { id: 2, name: '大卫', age: 21, count: 50 },\r\n *  { id: 3, name: '阿呆', age: 23, count: 55 },\r\n *  { id: 3, name: '阿呆', age: 23, count: 55 }\r\n * ]\r\n * indexOfAll([1, 2, 3, 1, 2, 3], 1) // [0,3])\r\n * indexOfAll(a1, 'id', 3) // [3,4])\r\n *\r\n *\r\n *\r\n */\r\n","/**\r\n * @description: 指定数组中某个索引的值 取出来，再插入到数组的任一位置\r\n * @param {Array} arr:被操作数组\r\n * @param {Number} oldIndex：老位置索引\r\n * @param {Number} newIndex：新位置索引\r\n * @param {Boolean} isChangeOldArr: 是否改变原数组\r\n * @return Array 返回一个数组\r\n */\r\nconst insetPostion = function (arr, oldIndex, newIndex, isChangeOldArr = false) {\r\n    let a = isChangeOldArr ? arr : JSON.parse(JSON.stringify(arr))\r\n    a.splice(newIndex, 0, a.splice(oldIndex, 1)[0])\r\n    return a\r\n}\r\nexport default insetPostion\r\n\r\n/**\r\n * 示例：\r\n *\r\n *\r\n * let a1 = [1, 2, 3, 4, 5, 6]\r\n *\r\n * insetPostion(a1, 3, 1) // [1, 4, 2, 3, 5, 6]\r\n *\r\n * a1 // [1, 2, 3, 4, 5, 6]\r\n *\r\n *\r\n */\r\n","import isEquals from '../base/isEquals'\r\n/**\r\n * @description: 数组内是否有重复值\r\n * @param {Array} arr: 被检测的数组\r\n * @return Boolean\r\n */\r\nconst isRepeat = function (arr) {\r\n    let len = arr.length\r\n    try {\r\n        for (let i = 0; i < len; i++) {\r\n            for (let k = i + 1; k < len; k++) {\r\n                if (isEquals(arr[i], arr[k])) {\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n        return false\r\n    } catch (e) {\r\n        return len !== unique(arr).length\r\n    }\r\n}\r\nexport default isRepeat\r\n\r\n/**\r\n *\r\n * 示例：\r\n *\r\n * let a1 = [\r\n *   { id: 1, name: '张三', age: 20 },\r\n *   { id: 1, name: '李四', age: 20 },\r\n *   { id: 3, name: '小明', age: 23 },\r\n *    { id: 2, name: '大卫', age: 21 },\r\n *   1,\r\n *   3,\r\n *   2,\r\n *   { 0: 1, 1: 2, 2: 3 },\r\n *   [1, 2, 3]\r\n * ]\r\n * isHasRepeat(a1) // false\r\n * let a2 = [\r\n *   { id: 1, name: '张三', age: 20 },\r\n *   { id: 1, name: '张三', age: 20 },\r\n *   { id: 1, name: '李四', age: 20 },\r\n *   { id: 3, name: '小明', age: 23 },\r\n *   { id: 2, name: '大卫', age: 21 },\r\n *   1,\r\n *   3,\r\n *   2,\r\n *   { 0: 1, 1: 2, 2: 3 },\r\n *   [1, 2, 3]\r\n * ]\r\n * isHasRepeat(a2) // true\r\n *\r\n *\r\n *\r\n *\r\n */\r\n","/**\r\n * 数组平均数\r\n * @param {Array} a:数组\r\n * @param {Function | String} f:函数 或 key\r\n */\r\nconst mean = function (a, f) {\r\n    return (f ? a.map(typeof f === 'function' ? f : v => v[f]) : a).reduce((acc, val) => acc + val * 1, 0) / a.length\r\n}\r\nexport default mean\r\n\r\n/**\r\n * 示例：\r\n *\r\n * mean([{ n: 4 }, { n: 2 }, { n: 8 }, { n: 6 }], o => o.n) // 5\r\n * mean([{ n: 4 }, { n: 2 }, { n: 8 }, { n: 6 }], 'n') // 5\r\n * mean([4, 2, 8, 6]) // 5\r\n * mean(['4', 2, '8', 6]) //5\r\n *\r\n *\r\n */\r\n","/**\r\n * @description: 生成 起止数字间（包含起止数字）的升序数组\r\n * @param {Number} min : 最小值\r\n * @param {Number} max ：最大值\r\n */\r\nconst range = function (min, max) {\r\n    return Array.from({ length: max - min + 1 }, (_, i) => i + min)\r\n}\r\nexport default range\r\n\r\n/**\r\n * 示例：\r\n *\r\n * range(0,10) // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n * range(1,9)  // [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n *\r\n */\r\n","/**\r\n * 生成两数之间指定长度（所需产生的个数）的随机数组\r\n * @param {Number} min：起始值\r\n * @param {Number} max：结束值\r\n * @param {Number} n：指定生成的个数，默认1\r\n * @param {Boolean} isRepeat：是否重复,默认重复\r\n */\r\nconst rangeRandom = function (min = 0, max = 0, n = 1, isRepeat = true) {\r\n    if (isRepeat) {\r\n        return Array.from({ length: n }, () => Math.floor(Math.random() * (max - min + 1)) + min)\r\n    } else {\r\n        let arr = Array.from({ length: max - min + 1 }, (_, i) => i + min)\r\n        let num = n > arr.length ? arr.length : n\r\n        let ret = []\r\n        while (ret.length != num) {\r\n            let random = arr[Math.floor(Math.random() * arr.length)]\r\n            !ret.includes(random) && ret.push(random)\r\n        }\r\n        return ret\r\n    }\r\n}\r\nexport default rangeRandom\r\n/**\r\n * 示例：\r\n *\r\n * rangeRandom(0,10) //\r\n * rangeRandom(0,10,3) //\r\n * rangeRandom(0,10,9,false) //\r\n *\r\n */\r\n","/**\r\n * @description: 生成 最小数字 0 到max最大值 的升序数组\r\n * @param {Number} max ：最大值\r\n */\r\nconst rangeScopeStartZore = function (max) {\r\n    return [...Object.keys(max).keys()]\r\n}\r\nexport default rangeScopeStartZore\r\n\r\n/**\r\n * 示例：\r\n *\r\n * rangeScopeStartZore(10) //[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n * rangeScopeStartZore(5)  //[0, 1, 2, 3, 4, 5]\r\n *\r\n */\r\n","/**\r\n * 生成指定范围内指定步长的数组\r\n * @param {Number} start : 起始值\r\n * @param {Number} stop : 结束值\r\n * @param {Number} step : 步长\r\n */\r\nconst rangeStep = function (start, stop, step) {\r\n    return Array.from({ length: (stop - start) / step + 1 }, (_, i) => start + i * step)\r\n}\r\nexport default rangeStep\r\n\r\n/**\r\n * 示例：\r\n *\r\n * rangeStep(0,19,2) // [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]\r\n * rangeStep(0,19,3) // [0, 3, 6, 9, 12, 15, 18]\r\n * rangeStep(0,19,4) // [0, 4, 8, 12, 16]\r\n *\r\n */\r\n","/**\r\n * 指定数组中获取随机数(1 位)\r\n * 不限 json 数组\r\n * @param {Array} arr :数组\r\n */\r\nconst sample = function (arr) {\r\n    return arr[Math.floor(Math.random() * arr.length)]\r\n}\r\nexport default sample\r\n\r\n/**\r\n *\r\n * 示例：\r\n *\r\n * sample([1,2,3,4,5])//\r\n *\r\n * sample([{id:1},{id:2},{id:3}])//\r\n *\r\n *\r\n */\r\n","/**\r\n * @description: 求和\r\n * @param  {Array} a ：传入的数组\r\n * @return {Number} 和\r\n */\r\nconst sum = function (a, k) {\r\n    return a.reduce((p, c) => p + (k ? c[k] || 0 : c), 0)\r\n}\r\nexport default sum\r\n\r\n/***\r\n * \r\n * \r\n * \r\nlet a = [1, 2, 3, 4, 5]\r\n\r\nsum(a) // 15\r\n​\r\nlet a1 = [\r\n    { id: 1, name: '张三', age: 20 },\r\n    { id: 2, name: '李四', age: 21 },\r\n    { id: 3, name: '小二', age: 23 }\r\n]\r\n\r\nsum(a1, 'age') //64 \r\n * \r\n * \r\n * \r\n * \r\n * \r\n * \r\n */\r\n","/**\r\n * 数组中出现次数统计\r\n * @param {Array} a：数组\r\n * @param {String} k：键名 | 键值\r\n * @param {any} v：键值\r\n */\r\nconst timesTotal = (a, k, v) => a.reduce((p, c) => ((v ? c[k] === v : c === k) ? p + 1 : p), 0)\r\n\r\nexport default timesTotal\r\n\r\n/**\r\n * 示例：\r\n *\r\n * let a1 = [1, 2, 3, 1, 5, 6, 1]\r\n *\r\n * timesTotal(a1, 1) // 3\r\n *\r\n * timesTotal([{a:1},{a:1}],'a',1) // 2\r\n *\r\n */\r\n","import isEquals from '../base/isEquals'\r\n/**\r\n * @description: 数组去重\r\n * @param {Array} a：需要去重的数组\r\n * @param {String} k：键名\r\n */\r\nconst unique = function (a, k) {\r\n    let ret = []\r\n    if (k) {\r\n        ret = a.reduce((p, c) => (p.map(i => i[k]).includes(c[k]) ? p : [...p, c]), [])\r\n    } else {\r\n        for (let i = 0, len = a.length; i < len; i++) {\r\n            if (i == 0) {\r\n                ret.push(a[i])\r\n            } else {\r\n                if (!ret.some(k => isEquals(k, a[i]))) {\r\n                    ret.push(a[i])\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return ret\r\n}\r\nexport default unique\r\n\r\n/**\r\n * 示例：\r\n * \r\nlet a = [1, 2, 3, 4, 5, 1, 2, 3]\r\n\r\nunique(a) // [1,2,3,4,5]\r\n\r\nlet a1 = [\r\n    { id: 1, name: '张三', age: 20 },\r\n    { id: 2, name: '李四', age: 21 },\r\n    { id: 3, name: '小红', age: 23 },\r\n    { id: 2, name: '李四', age: 21 }\r\n]\r\n\r\nunique(a1)\r\n//\r\n[\r\n{id: 1, name: \"张三\", age: 20},\r\n{id: 2, name: '李四', age: 21 },\r\n{id: 3, name: \"小红\", age: 23}\r\n]\r\n \r\n\r\n * \r\n * \r\n */\r\n","\r\n/**\r\n * @description: json 数组项重组\r\n * @param {*} arr\r\n * @param {*} key\r\n * @param {*} value\r\n */\r\nconst make =  function(arr, k1, k2) {\r\n    return arr.reduce((p, c) => [...p, { [c[k1]]: c[k2] }], [])\r\n}\r\nexport default make\r\n\r\n/*\r\n示例：\r\nlet arr = [\r\n    {uuid: \"32317268-a82f-384c-33a1-20b48c69fa07\", name: \"张三\", time: \"2021-06-28 15:07:18\", age: 20}\r\n    {uuid: \"514c416f-379b-fc13-853c-291026504bb9\", name: \"李四\", time: \"2021-06-29 15:07:18\", age: 21}\r\n    {uuid: \"e2b03c8b-654a-3c48-c853-19aeccf4d00e\", name: \"小红\", time: \"2021-06-30 15:07:18\", age: 22}\r\n    {uuid: \"d1135ef4-f11e-d9ee-39b2-82119174fd5c\", name: \"李明\", time: \"2021-07-01 15:07:18\", age: 23}\r\n]\r\n// 数组项 指定某项值 为 key，某项值 为 value\r\nrutils.make(arr, 'uuid', 'age')\r\n\r\n[\r\n    {32317268-a82f-384c-33a1-20b48c69fa07: 20}\r\n    {514c416f-379b-fc13-853c-291026504bb9: 21}\r\n    {e2b03c8b-654a-3c48-c853-19aeccf4d00e: 22}\r\n    {d1135ef4-f11e-d9ee-39b2-82119174fd5c: 23}\r\n]\r\n*/","/**\r\n * @description: json数组项属性筛选\r\n * @param {*} arr \r\n * @param {*} keys\r\n */\r\nconst pick = function pick(arr, keys) {\r\n    return arr.reduce((p, c) => [...p, keys.reduce((p1, c1) => ({ ...p1, [c1]: c[c1] }), {})], [])\r\n}\r\nexport default pick\r\n\r\n/**\r\n * \r\n * 示例：\r\n * \r\n * \r\nlet arr = [\r\n    {uuid: \"32317268-a82f-384c-33a1-20b48c69fa07\", name: \"张三\", time: \"2021-06-28 15:07:18\", age: 20}\r\n    {uuid: \"514c416f-379b-fc13-853c-291026504bb9\", name: \"李四\", time: \"2021-06-29 15:07:18\", age: 21}\r\n    {uuid: \"e2b03c8b-654a-3c48-c853-19aeccf4d00e\", name: \"小红\", time: \"2021-06-30 15:07:18\", age: 22}\r\n    {uuid: \"d1135ef4-f11e-d9ee-39b2-82119174fd5c\", name: \"李明\", time: \"2021-07-01 15:07:18\", age: 23}\r\n]\r\n\r\nrutils.pick(arr,['uuid','name'])\r\n\r\n\r\n[\r\n    {uuid: \"32317268-a82f-384c-33a1-20b48c69fa07\", name: \"张三\"}\r\n    {uuid: \"514c416f-379b-fc13-853c-291026504bb9\", name: \"李四\"}\r\n    {uuid: \"e2b03c8b-654a-3c48-c853-19aeccf4d00e\", name: \"小红\"}\r\n    {uuid: \"d1135ef4-f11e-d9ee-39b2-82119174fd5c\", name: \"李明\"}\r\n]\r\n\r\n * \r\n * \r\n * \r\n * \r\n * \r\n * \r\n */","/**\r\n * @description: 根据 id 获取 tree 的节点\r\n * @param {Array} list ：树数组\r\n * @param {String} id： id 值\r\n * @param {String} link: id 别名\r\n */\r\nconst getTreeNode = function (list, id, link = 'id') {\r\n  for (let i = 0, len = list.length; i < len; i++) {\r\n    const item = list[i]\r\n    if (item[link] === id) return item\r\n    if (item.children && item.children.length) {\r\n      const res = getTreeNode(item.children, id, link)\r\n      if (res) return res\r\n    }\r\n  }\r\n}\r\nexport default getTreeNode\r\n"],"names":["isEquals","a","b","Date","getTime","_typeof","prototype","keys","Object","length","Array","isArray","type","every","k","o","toString","call","slice","union","concat","filter","i","map","includes","intersection","t","archive","arr","key","from","Set","reduce","p","c","push","arrayFill","len","fill","arrayToObject","entries","arrayToTree","id","link","children","delBy","JSON","parse","stringify","splice","indexOf","item","except","exchangePostion","oldIndex","newIndex","flatten","depth","v","group","num","_toConsumableArray","Math","ceil","_","indexOfAll","insetPostion","isRepeat","e","unique","mean","f","acc","val","range","min","max","rangeRandom","n","floor","random","ret","rangeScopeStartZore","rangeStep","start","stop","step","sample","sum","timesTotal","some","make","k1","k2","pick","p1","c1","getTreeNode","list","res"],"mappings":"wzDAIiB,SAAXA,EAAqBC,EAAGC,MACtBD,IAAMC,EAAG,OAAO,KAChBD,aAAaE,MAAQD,aAAaC,KAAM,OAAOF,EAAEG,YAAcF,EAAEE,cAChEH,IAAMC,GAAmB,WAAbG,EAAOJ,IAA+B,WAAbI,EAAOH,GAAiB,OAAOD,IAAMC,KAC3ED,EAAEK,YAAcJ,EAAEI,UAAW,OAAO,MACpCC,EAAOC,OAAOD,KAAKN,UACnBM,EAAKE,SAAWD,OAAOD,KAAKL,GAAGO,UAE1BC,MAAMC,QAAQV,IAAMS,MAAMC,QAAQT,IAAmB,UAAXU,EAAKX,IAA6B,UAAXW,EAAKV,KAAoBK,EAAKM,MAAM,SAAAC,UAAKd,EAASC,EAAEa,GAAIZ,EAAEY,OADzH,SAAPF,EAAOG,UAAKP,OAAOF,UAAUU,SAASC,KAAKF,GAAGG,MAAM,GAAI,UCmBjD,CACXC,MCYU,SAAUlB,EAAGC,EAAGY,UACnBb,EAAEmB,OAAOlB,EAAEmB,OAAO,SAAAC,UAAMR,GAAKb,EAAEsB,IAAI,SAAAD,UAAKA,EAAER,KAAIU,SAASF,EAAER,KAAOb,EAAEuB,SAASF,ODZlFG,aEAiB,SAAUxB,EAAGC,EAAGY,UAC1Bb,EAAEoB,OAAO,SAAAK,UAAMZ,EAAIZ,EAAEqB,IAAI,SAAAD,UAAKA,EAAER,KAAIU,SAASE,EAAEZ,IAAMZ,EAAEsB,SAASE,MFAvEC,QG5BY,SAAUC,EAAKC,UACpBnB,MAAMoB,KAAK,IAAIC,IAAIH,EAAIL,IAAI,SAAAD,UAAKA,EAAEO,OAAQG,OAAO,SAACC,EAAGC,UAAOD,EAAEE,KAAKP,EAAIP,OAAO,SAAAC,UAAKA,EAAEO,KAASK,KAAKD,GAAI,KH4B9GG,UI7Bc,SAAUC,EAAKtB,UACtBL,MAAM2B,GAAKC,KAAKvB,IJ6BvBwB,cK/BkB,SAAUX,UACrBlB,MAAMoB,KAAKF,EAAIY,WAAWR,OAAO,SAACC,EAAGC,UAAQD,EAAEC,EAAE,IAAMA,EAAE,GAAKD,GAAI,KL+BzEQ,YM9BgB,SAAdA,EAAwBb,EAAV,EAAA,OAAec,+BAAf,EAAA,EAAoB,KAAMC,+BAA1B,EAAA,EAAiC,aAC1Cf,EAAIP,OAAO,SAAAC,UAAKA,EAAEqB,KAAUD,IAAInB,IAAI,SAAAD,iBAAWA,OAAGsB,SAAUH,EAAYb,EAAKN,EAAEoB,GAAIC,QN8B1FE,MO9BU,SAAUjB,EAAKb,EAAf,WACNd,+BADM,GAAA,EACe2B,EAAMkB,KAAKC,MAAMD,KAAKE,UAAUpB,IAChDN,EAAIrB,EAAEQ,OAAS,EAAQ,GAALa,EAAQA,OACd,mBAANP,EACPA,EAAEd,EAAEqB,KAAOrB,EAAEgD,OAAO3B,EAAG,QACpB,GAAIZ,MAAMC,QAAQI,IACF,EAAnBA,EAAEmC,QAAQjD,EAAEqB,KAAYrB,EAAEgD,OAAO3B,EAAG,QACjC,GAAIrB,EAAEqB,KAAOP,EAChBd,EAAEgD,OAAO3B,EAAG,QACT,GAAuD,WAAnDd,OAAOF,UAAUU,SAASC,KAAKF,GAAGG,MAAM,GAAI,GAAiB,KAE3DJ,EADLqC,EAAOlD,EAAEqB,OACJR,KAAKC,EACVL,MAAMC,QAAQI,EAAED,KAA+B,EAAzBC,EAAED,GAAGoC,QAAQC,EAAKrC,KAAYb,EAAEgD,OAAO3B,EAAG,GAAKP,EAAED,KAAOqC,EAAKrC,IAAMb,EAAEgD,OAAO3B,EAAG,UAI1GrB,GPePmD,OQAW,SAAUnD,EAAGC,EAAGY,SACpB,YAAIb,KAAMC,IAAGmB,OAAO,SAAAC,UAAM,CAACrB,EAAGC,GAAGW,MAAM,SAAAa,UAAMZ,EAAIY,EAAEH,IAAI,SAAAD,UAAKA,EAAER,KAAIU,SAASF,EAAER,IAAMY,EAAEF,SAASF,QRArG+B,gBS/BoB,SAAUzB,EAAK0B,EAAUC,EAAzB,GAChBtD,+BADgB,GAAA,EACK2B,EAAMkB,KAAKC,MAAMD,KAAKE,UAAUpB,WACzD3B,EAAEgD,OAAOK,EAAU,EAAGrD,EAAEgD,OAAOM,EAAU,EAAGtD,EAAEqD,IAAW,IAClDrD,GT6BPuD,QUnCY,SAAVA,EAAoB5B,EAAV,OAAe6B,+BAAf,EAAA,EAAuB,SAC5B7B,EAAII,OAAO,SAAC/B,EAAGyD,UAAMzD,EAAEmB,OAAe,EAARqC,GAAa/C,MAAMC,QAAQ+C,GAAKF,EAAQE,EAAGD,EAAQ,GAAKC,IAAI,KVmCjGC,MWpCU,SAAU/B,EAAKgC,UAClBC,EAAInD,MAAMoD,KAAKC,KAAKnC,EAAInB,OAASmD,IAAMrD,QAAQyB,OAAO,SAACC,EAAG+B,EAAG1C,UAAOW,EAAEE,KAAKP,EAAIV,MAAMI,EAAIsC,GAAMtC,EAAI,GAAKsC,IAAO3B,GAAI,KXoC1HgC,WYpCe,SAAChE,EAAGa,EAAG4C,UAAMzD,EAAE+B,OAAO,SAACC,EAAGC,EAAGZ,UAAQoC,EAAIxB,EAAEpB,KAAO4C,EAAIxB,IAAMpB,eAASmB,IAAGX,IAAKW,GAAI,KZqChGiC,aanCiB,SAAUtC,EAAK0B,EAAUC,EAAzB,GACbtD,+BADa,GAAA,EACQ2B,EAAMkB,KAAKC,MAAMD,KAAKE,UAAUpB,WACzD3B,EAAEgD,OAAOM,EAAU,EAAGtD,EAAEgD,OAAOK,EAAU,GAAG,IACrCrD,GbiCPkE,SctCa,SAAUvC,OACnBS,EAAMT,EAAInB,eAEL,IAAIa,EAAI,EAAGA,EAAIe,EAAKf,QAChB,IAAIR,EAAIQ,EAAI,EAAGR,EAAIuB,EAAKvB,OACrBd,EAAS4B,EAAIN,GAAIM,EAAId,WACd,SAIZ,EACT,MAAOsD,UACE/B,IAAQgC,OAAOzC,GAAKnB,Sd2B/B6D,KexCS,SAAUrE,EAAGsE,UACdA,EAAItE,EAAEsB,IAAiB,mBAANgD,EAAmBA,EAAI,SAAAb,UAAKA,EAAEa,KAAMtE,GAAG+B,OAAO,SAACwC,EAAKC,UAAQD,IAAMC,GAAS,GAAKxE,EAAEQ,QfwC3GiE,MgBzCU,SAAUC,EAAKC,UAClBlE,MAAMoB,KAAK,CAAErB,OAAQmE,EAAMD,EAAM,GAAK,SAACX,EAAG1C,UAAMA,EAAIqD,KhByC3DE,YiBxCgB,SAAA,EAAA,EAAA,EAAA,OAAUF,+BAAV,EAAA,EAAgB,EAAGC,+BAAnB,EAAA,EAAyB,EAAGE,+BAA5B,EAAA,EAAgC,oCAAhC,IAAA,SAELpE,MAAMoB,KAAK,CAAErB,OAAQqE,GAAK,kBAAMhB,KAAKiB,MAAMjB,KAAKkB,UAAYJ,EAAMD,EAAM,IAAMA,YAEjF/C,EAAMlB,MAAMoB,KAAK,CAAErB,OAAQmE,EAAMD,EAAM,GAAK,SAACX,EAAG1C,UAAMA,EAAIqD,IAC1Df,EAAMkB,EAAIlD,EAAInB,OAASmB,EAAInB,OAASqE,EACpCG,EAAM,GACHA,EAAIxE,QAAUmD,GAAK,KAClBoB,EAASpD,EAAIkC,KAAKiB,MAAMjB,KAAKkB,SAAWpD,EAAInB,SAC/CwE,EAAIzD,SAASwD,IAAWC,EAAI9C,KAAK6C,UAE/BC,GjB8BXC,oBkB5CwB,SAAUN,YACvBpE,OAAOD,KAAKqE,GAAKrE,SlB4C5B4E,UmB3Cc,SAAUC,EAAOC,EAAMC,UAC9B5E,MAAMoB,KAAK,CAAErB,QAAS4E,EAAOD,GAASE,EAAO,GAAK,SAACtB,EAAG1C,UAAM8D,EAAQ9D,EAAIgE,KnB2C/EC,OoB7CW,SAAU3D,UACdA,EAAIkC,KAAKiB,MAAMjB,KAAKkB,SAAWpD,EAAInB,UpB6C1C+E,IqB9CQ,SAAUvF,EAAGa,UACdb,EAAE+B,OAAO,SAACC,EAAGC,UAAMD,GAAKnB,EAAIoB,EAAEpB,IAAM,EAAIoB,IAAI,IrB8CnDuD,WsB9Ce,SAACxF,EAAGa,EAAG4C,UAAMzD,EAAE+B,OAAO,SAACC,EAAGC,UAAQwB,EAAIxB,EAAEpB,KAAO4C,EAAIxB,IAAMpB,GAAKmB,EAAI,EAAIA,GAAI,ItB+CzFoC,OuB/CW,SAAUpE,EAAGa,OACpBmE,EAAM,MACNnE,EACAmE,EAAMhF,EAAE+B,OAAO,SAACC,EAAGC,UAAOD,EAAEV,IAAI,SAAAD,UAAKA,EAAER,KAAIU,SAASU,EAAEpB,IAAMmB,cAAQA,IAAGC,KAAK,iBAEnEZ,EAAI,EAAGe,EAAMpC,EAAEQ,OAAQa,EAAIe,EAAKf,cAAhCA,GACI,GAALA,GAGK2D,EAAIS,KAAK,SAAA5E,UAAKd,EAASc,EAAGb,EAAEqB,OAFjC2D,EAAI9C,KAAKlC,EAAEqB,KAFVA,UAUN2D,GvBiCPU,KwB/CU,SAAS/D,EAAKgE,EAAIC,UACrBjE,EAAII,OAAO,SAACC,EAAGC,qBAAUD,SAAMC,EAAE0D,GAAM1D,EAAE2D,OAAQ,KxB+CxDC,KyBlDS,SAAclE,EAAKrB,UACrBqB,EAAII,OAAO,SAACC,EAAGC,qBAAUD,IAAG1B,EAAKyB,OAAO,SAAC+D,EAAIC,iBAAaD,WAAKC,EAAK9D,EAAE8D,MAAQ,OAAM,KzBkD3FC,Y0BlDgB,SAAdA,EAAwBC,EAAMxD,EAAhB,WAAoBC,+BAApB,EAAA,EAA2B,KACpCrB,EAAI,EAAGe,EAAM6D,EAAKzF,OAAQa,EAAIe,EAAKf,IAAK,KACzC6B,EAAO+C,EAAK5E,MACd6B,EAAKR,KAAUD,EAAI,OAAOS,KAC1BA,EAAKP,UAAYO,EAAKP,SAASnC,OAAQ,CACnC0F,EAAMF,EAAY9C,EAAKP,SAAUF,EAAIC,MACvCwD,EAAK,OAAOA"}