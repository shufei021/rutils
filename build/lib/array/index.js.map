{"version":3,"file":"index.js","sources":["../../../src/lib/base/isEquals.js","../../../src/lib/base/isType.js","../../../src/lib/base/getType.js","../../../src/lib/object/deepClone.js","../../../src/lib/array/index.js","../../../src/lib/array/union.js","../../../src/lib/array/intersection.js","../../../src/lib/array/archive.js","../../../src/lib/array/arrayFill.js","../../../src/lib/array/arrayToObject.js","../../../src/lib/array/arrayToTree.js","../../../src/lib/array/delBy.js","../../../src/lib/array/except.js","../../../src/lib/array/exchangePostion.js","../../../src/lib/array/flatten.js","../../../src/lib/array/group.js","../../../src/lib/array/indexOfAll.js","../../../src/lib/array/insetPostion.js","../../../src/lib/array/isRepeat.js","../../../src/lib/array/mean.js","../../../src/lib/array/range.js","../../../src/lib/array/rangeRandom.js","../../../src/lib/array/rangeScopeStartZore.js","../../../src/lib/array/rangeStep.js","../../../src/lib/array/sample.js","../../../src/lib/array/sum.js","../../../src/lib/array/timesTotal.js","../../../src/lib/array/unique.js","../../../src/lib/array/make.js","../../../src/lib/array/pick.js","../../../src/lib/array/getTreeNode.js","../../../src/lib/array/arrayGroup.js","../../../src/lib/array/arrayAt.js","../../../src/lib/array/arrayRepeat.js","../../../src/lib/array/arraySubstr.js","../../../src/lib/array/delByIndexs.js","../../../src/lib/array/findIndexs.js","../../../src/lib/array/groupArchive.js","../../../src/lib/array/groupState.js","../../../src/lib/array/lastFind.js","../../../src/lib/array/lastFindIndex.js","../../../src/lib/array/rangeGenerater.js","../../../src/lib/array/arrayRestore.js"],"sourcesContent":["/**\r\n * @param {any} a：比较的值\r\n * @param {any} b：其他要比较的值\r\n */\r\nconst isEquals = function (a, b) {\r\n    if (a === b) return true\r\n    if (a instanceof Date && b instanceof Date) return a.getTime() === b.getTime()\r\n    if (!a || !b || (typeof a !== 'object' && typeof b !== 'object')) return a === b\r\n    if (a.prototype !== b.prototype) return false\r\n    let keys = Object.keys(a)\r\n    if (keys.length !== Object.keys(b).length) return false\r\n    let type = o => Object.prototype.toString.call(o).slice(8, -1)\r\n    return ((Array.isArray(a) && Array.isArray(b)) || (type(a) == 'Object' && type(b) == 'Object')) && keys.every(k => isEquals(a[k], b[k]))\r\n}\r\nexport default isEquals\r\n","import getType from \"./getType\";\r\n/**\r\n * @description: 判断传入的值和类型 是否匹配\r\n * @param  {*} value ：传入的值\r\n * @param  {String} type ：传入的类型\r\n * @return {Boolean} false 或 true\r\n */\r\nconst isType = function (val, type) {\r\n    return getType(val) === type\r\n}\r\nexport default isType\r\n","/**\r\n * @description: 获取数据类型\r\n * @param {*} value : 传入的值\r\n */\r\nconst getType = function getType(value) {\r\n    return Object.prototype.toString.call(value).slice(8, -1).toLowerCase()\r\n}\r\nexport default getType\r\n","import isType from '../base/isType'\r\n\r\n/**\r\n * deep clone\r\n * @param  {[type]} parent object 需要进行克隆的对象\r\n * @return {[type]}        深克隆后的对象\r\n */\r\nconst clone = parent => {\r\n    // 维护两个储存循环引用的数组\r\n    const parents = []\r\n    const children = []\r\n    const _clone = parent => {\r\n        if (parent === null) return null\r\n        if (typeof parent !== 'object') return parent\r\n\r\n        let child, proto\r\n\r\n        if (isType(parent, 'array')) {\r\n            // 对数组做特殊处理\r\n            child = []\r\n        } else if (isType(parent, 'regexp')) {\r\n            // 对正则对象做特殊处理\r\n            child = new RegExp(parent.source, getRegExp(parent))\r\n            if (parent.lastIndex) child.lastIndex = parent.lastIndex\r\n        } else if (isType(parent, 'date')) {\r\n            // 对Date对象做特殊处理\r\n            child = new Date(parent.getTime())\r\n        } else {\r\n            // 处理对象原型\r\n            proto = Object.getPrototypeOf(parent)\r\n            // 利用Object.create切断原型链\r\n            child = Object.create(proto)\r\n        }\r\n\r\n        // 处理循环引用\r\n        const index = parents.indexOf(parent)\r\n\r\n        if (index !== -1) {\r\n            // 如果父数组存在本对象,说明之前已经被引用过,直接返回此对象\r\n            return children[index]\r\n        }\r\n        parents.push(parent)\r\n        children.push(child)\r\n\r\n        for (const i in parent) {\r\n            // 递归\r\n            child[i] = _clone(parent[i])\r\n        }\r\n\r\n        return child\r\n    }\r\n    return _clone(parent)\r\n}\r\n\r\n/**\r\n * 对象深度克隆,\r\n * JSON.stringify深度克隆对象\r\n * 无法对函数 、RegExp等特殊对象的克隆,\r\n * 会抛弃对象的constructor,所有的构造函数会指向Object\r\n * 对象有循环引用,会报错\r\n * @param {Object}  obj 克隆的对象\r\n */\r\nconst deepClone = obj => {\r\n    return clone(obj)\r\n}\r\nexport default deepClone\r\n","import archive from './archive'\r\nimport arrayFill from './arrayFill'\r\nimport arrayToObject from './arrayToObject'\r\nimport arrayToTree from './arrayToTree'\r\nimport delBy from './delBy'\r\nimport except from './except'\r\nimport exchangePostion from './exchangePostion'\r\nimport flatten from './flatten'\r\nimport group from './group'\r\nimport indexOfAll from './indexOfAll'\r\nimport insetPostion from './insetPostion'\r\nimport intersection from './intersection'\r\nimport mean from './mean'\r\nimport range from './range'\r\nimport rangeRandom from './rangeRandom'\r\nimport rangeScopeStartZore from './rangeScopeStartZore'\r\nimport rangeStep from './rangeStep'\r\nimport sample from './sample'\r\nimport sum from './sum'\r\nimport timesTotal from './timesTotal'\r\nimport unique from './unique'\r\nimport union from './union'\r\nimport isRepeat from './isRepeat'\r\nimport pick from './pick'\r\nimport make from './make'\r\nimport getTreeNode from './getTreeNode'\r\n\r\nimport arrayRestore from './arrayRestore'\r\nimport arrayGroup from './arrayGroup'\r\nimport arrayAt from './arrayAt'\r\nimport arrayRepeat from './arrayRepeat'\r\nimport arraySubstr from './arraySubstr'\r\nimport delByIndexs from './delByIndexs'\r\nimport findIndexs from './findIndexs'\r\nimport groupArchive from './groupArchive'\r\nimport groupState from './groupState'\r\nimport lastFind from './lastFind'\r\nimport lastFindIndex from './lastFindIndex'\r\nimport rangeGenerater from './rangeGenerater'\r\n\r\n/**\r\n * 数组\r\n */\r\nexport default {\r\n    union,\r\n    intersection,\r\n    archive,\r\n    arrayFill,\r\n    arrayToObject,\r\n    arrayToTree,\r\n    delBy,\r\n    except,\r\n    exchangePostion,\r\n    flatten,\r\n    group,\r\n    indexOfAll,\r\n    insetPostion,\r\n    isRepeat,\r\n    mean,\r\n    range,\r\n    rangeRandom,\r\n    rangeScopeStartZore,\r\n    rangeStep,\r\n    sample,\r\n    sum,\r\n    timesTotal,\r\n    unique,\r\n    make,\r\n    pick,\r\n    getTreeNode,\r\n    arrayGroup,\r\n    arrayAt,\r\n    arrayRepeat,\r\n    arraySubstr,\r\n    delByIndexs,\r\n    findIndexs,\r\n    groupArchive,\r\n    groupState,\r\n    lastFind,\r\n    lastFindIndex,\r\n    rangeGenerater,\r\n    arrayRestore\r\n}\r\n","/**\r\n * @description: 求数组并集\r\n * @param  {Array} a ：传入的数组a\r\n * @param  {Array} b ：传入的数组b\r\n * @return {Array} 两数组的并集\r\n * \r\n * \r\n * \r\n * \r\n * // 场景1：\r\nlet a = [1, 2, 3, 4, 5]\r\nlet b = [1, 2, 4, 5, 6]\r\n\r\nunion(a, b) //[1,2,3,4,5,6]\r\n\r\n// 场景2：\r\nlet a1 = [\r\n    { id: 1, name: '张三', age: 20 },\r\n    { id: 2, name: '李四', age: 21 },\r\n    { id: 3, name: '小二', age: 23 }\r\n]\r\nlet b1 = [\r\n    { id: 2, name: '李四', age: 21 },\r\n    { id: 4, name: '小明', age: 24 },\r\n    { id: 5, name: '小红', age: 25 }\r\n]\r\n\r\n// 通过 id 获取并集\r\n\r\nunion(a1, b1, 'id')\r\n\r\n\r\n[\r\n  {id: 1, name: \"张三\", age: 20}\r\n  {id: 2, name: \"李四\", age: 21}\r\n  {id: 3, name: \"小二\", age: 23}\r\n  {id: 4, name: \"小明\", age: 24}\r\n  {id: 5, name: \"小红\", age: 25}\r\n]\r\n * \r\n * \r\n */\r\n\r\nconst union = function (a, b, k) {\r\n    return a.concat(b.filter(i => (k ? !a.map(i => i[k]).includes(i[k]) : !a.includes(i))))\r\n}\r\n\r\nexport default union\r\n","/**\r\n * @description: 求数组交集\r\n * @param  {Array} a ：传入的数组a\r\n * @param  {Array} b ：传入的数组b\r\n * @return {Array} 两数组的交集\r\n * \r\n * \r\n * \r\n * \r\n// 场景1：\r\nlet a = [1, 2, 3, 4, 5]\r\nlet b = [1, 2, 4, 5, 6]\r\n\r\nintersection(a, b) // [1,2,4,5]\r\n\r\n// 场景2：\r\nlet a1 = [\r\n    { id: 1, name: '张三', age: 20 },\r\n    { id: 2, name: '李四', age: 21 },\r\n    { id: 3, name: '小二', age: 23 }\r\n]\r\nlet b1 = [\r\n    { id: 2, name: '李四', age: 21 },\r\n    { id: 4, name: '小明', age: 24 },\r\n    { id: 5, name: '小红', age: 25 }\r\n]\r\n\r\nintersection(a1, b1, 'id') //[ { id: 2, name: '李四', age: 21 }]\r\n * \r\n * \r\n * \r\n */\r\nconst intersection = function (a, b, k) {\r\n    return a.filter(t => (k ? b.map(i => i[k]).includes(t[k]) : b.includes(t)))\r\n}\r\nexport default intersection\r\n","/**\r\n * @description: 对一维 json 数组进行归档（根据 key）\r\n * @param {Array} arr:一维数组\r\n * @param {String} key：key 字符串\r\n */\r\nconst archive = function (arr, key) {\r\n    return Array.from(new Set(arr.map(i => i[key]))).reduce((p, c) => (p.push(arr.filter(i => i[key] === c)), p), [])\r\n}\r\nexport default archive\r\n\r\n/***\r\n *\r\n * 示例：\r\n *\r\n * let books = [ {date:'1月',name:'地理书'}, {date:'1月',name:'历史书'}, {date:'2月',name:'化学书'} ]\r\n *\r\n * archive( books, 'date') // [[{date:'1月',name:'地理书'},{date:'1月',name:'历史书'}],[ {date:'2月',name:'化学书'}]]\r\n *\r\n *\r\n */\r\n","/**\r\n * @description: 生成一个指定长度 每个值都填充为统一的 指定值\r\n * @param {Number} len ：数组长度\r\n * @param {any} o：填充的值\r\n */\r\nconst arrayFill = function (len, o) {\r\n    return Array(len).fill(o)\r\n}\r\nexport default arrayFill\r\n\r\n/**\r\n * 示例：\r\n *\r\n * generate(5,1) // [1,1,1,1,1]\r\n * generate(3,{name:''}) // [{name:''},{name:''},{name:''}]\r\n *\r\n */\r\n","/**\r\n * @description: 数组转树\r\n * @param {Array} arr ：数组\r\n */\r\nconst arrayToObject = function (arr) {\r\n    return Array.from(arr.entries()).reduce((p, c) => ((p[c[0]] = c[1]), p), {})\r\n}\r\nexport default arrayToObject\r\n/**\r\n * 示例：\r\n *\r\n * let arr = [\"a\", \"b\", \"c\"];\r\n * arrayToObject(arr) // {0: \"a\", 1: \"b\", 2: \"c\"}\r\n *\r\n *\r\n */\r\n","/**\r\n * @description: 数组转树\r\n * @param {Array} arr：需要转树的json数组\r\n * @param {Number | string} id：树节点 id\r\n * @param {String} link：父id\r\n */\r\nconst arrayToTree = function (arr, id = null, link = 'pid') {\r\n    return arr.filter(i => i[link] === id).map(i => ({ ...i, children: arrayToTree(arr, i.id, link) }))\r\n}\r\nexport default arrayToTree\r\n","/**\r\n * @description: 根据条件删除数组中的值\r\n * @param {Array} arr：被操作的数组\r\n * @param {any} o：条件\r\n * @param {Boolean} isChangeOldArr：是否改变原数组\r\n * @return {Array} 返回处理后的数组\r\n */\r\nconst delBy = function (arr, o, isChangeOldArr = false) {\r\n    let a = isChangeOldArr ? arr : JSON.parse(JSON.stringify(arr))\r\n    for (let i = a.length - 1; i >= 0; i--) {\r\n        if (typeof o === 'function') {\r\n            o(a[i]) && a.splice(i, 1)\r\n        } else if (Array.isArray(o)) {\r\n            o.indexOf(a[i]) > -1 && a.splice(i, 1)\r\n        } else if (a[i] === o) {\r\n            a.splice(i, 1)\r\n        } else if (Object.prototype.toString.call(o).slice(8, -1) === 'Object') {\r\n            let item = a[i]\r\n            for (let k in o) {\r\n                Array.isArray(o[k]) ? o[k].indexOf(item[k]) > -1 && a.splice(i, 1) : o[k] === item[k] && a.splice(i, 1)\r\n            }\r\n        }\r\n    }\r\n    return a\r\n}\r\nexport default delBy\r\n\r\n/**\r\n * 用法1：\r\n * let a1 = [1, 2, 3, 4, 5, 6]\r\n * delBy(a1, 2)// [1, 3, 4, 5, 6]\r\n * a1 // [1, 2, 3, 4, 5, 6]\r\n * let a1 = [1, 2, 3, 4, 5, 6]\r\n * delBy(a1, 2, true)// [1, 3, 4, 5, 6]\r\n * a1 // [1, 3, 4, 5, 6]\r\n *\r\n *\r\n *\r\n */\r\n\r\n/**\r\n * 用法2：\r\n * let a1 = [\r\n *   { id: 1, name: '罗老板', age: 18 },\r\n *   { id: 2, name: '帆老板', age: 19 },\r\n *   { id: 3, name: '全老板', age: 20 },\r\n *    { id: 2, name: '帆老板', age: 19 }\r\n * ]\r\n * // 删除 a1 数组中 id 为 2的值\r\n * delBy(a1, item => item.id === 2) //  等价于 handday.arr.delBy(a1, { id: 2 })\r\n * console.log(a1)\r\n * //\r\n * [\r\n *     { id: 1, name: '罗老板', age: 18 },\r\n *    { id: 3, name: '全老板', age: 20 },\r\n * ]\r\n *\r\n *\r\n *\r\n *\r\n *\r\n */\r\n\r\n/**\r\n * 用法3：\r\n *\r\n *\r\n * let a1 = [\r\n *    { id: 1, name: '罗老板', age: 18 },\r\n *     { id: 2, name: '帆老板', age: 19 },\r\n *     { id: 3, name: '全老板', age: 20 },\r\n *     { id: 2, name: '帆老板', age: 19 }\r\n * ]\r\n * // 删除 只要 id 是 1 或 2的值\r\n * delBy(a1, { id: [1, 2] })\r\n * console.log(a1)\r\n * //\r\n * [\r\n *     { id: 3, name: '全老板', age: 20 },\r\n * ]\r\n *\r\n *\r\n *\r\n */\r\n\r\n/**\r\n * 用法4：\r\n *\r\n *\r\n * let a1 = [\r\n *     { id: 1, name: '罗老板', age: 18 },\r\n *     { id: 2, name: '帆老板', age: 19 },\r\n *     { id: 3, name: '全老板', age: 20 },\r\n *     { id: 2, name: '帆老板', age: 19 }\r\n * ]\r\n * // 删除 a1 数组中 id值为 2，或 name值为 全老板  PS：注意是或的关系\r\n * delBy(a1, { id: 2, name: '全老板' })\r\n * console.log(a1)\r\n *\r\n *\r\n *\r\n *\r\n */\r\n\r\n/**\r\n * 用法5：\r\n *\r\n *\r\n * let a1 = [\r\n *     { id: 1, name: '罗老板', age: 18 },\r\n *     { id: 2, name: '帆老板', age: 19 },\r\n *     { id: 3, name: '全老板', age: 20 },\r\n *     { id: 2, name: '帆老板', age: 19 },\r\n *     { id: 4, name: '卫老板', age: 22 },\r\n *     { id: 5, name: '卓老板', age: 21 },\r\n *     { id: 6, name: '黄老板', age: 23 }\r\n * ]\r\n * // 只要 id值为 2 ，name值 是 全老板 或 卫老板，age值是23 ，对应的值都从数组中删除掉\r\n * delBy(a1, { id: 2, name: ['全老板', '卫老板'], age: 23 })\r\n * console.log(a1)\r\n * //\r\n * [\r\n * {id: 1, name: \"罗老板\", age: 18}\r\n * {id: 5, name: \"卓老板\", age: 21}\r\n * ]\r\n *\r\n *\r\n *\r\n */\r\n\r\n/***\r\n * 用法6：\r\n *\r\n * let a1 = [1, 2, 3, 4, 5, 2]\r\n * // 删除 给出的数组范围的值\r\n * delBy(a1, [2, 3, 4])\r\n * console.log(a1) //[1,5]\r\n *\r\n *\r\n *\r\n */\r\n","/**\r\n * @description: 求数组差集\r\n * @param  {Array} a ：传入的数组a\r\n * @param  {Array} b ：传入的数组b\r\n * @return {Array} 两数组的差集\r\n * \r\n * \r\n * \r\n * \r\nlet a = [1, 2, 3, 4, 5]\r\nlet b = [1, 2, 4, 5, 6]\r\n​\r\nexcept(a, b) // [3,6]\r\n​\r\nlet a1 = [\r\n    { id: 1, name: '张三', age: 20 },\r\n    { id: 2, name: '李四', age: 21 },\r\n    { id: 3, name: '小二', age: 23 }\r\n]\r\nlet b1 = [\r\n    { id: 2, name: '李四', age: 21 },\r\n    { id: 4, name: '小明', age: 24 },\r\n    { id: 5, name: '小红', age: 25 }\r\n]\r\n​\r\nexcept(a1, b1, 'id')\r\n\r\n[\r\n  {id: 1, name: \"张三\", age: 20}\r\n  {id: 3, name: \"小二\", age: 23}\r\n  {id: 4, name: \"小明\", age: 24}\r\n  {id: 5, name: \"小红\", age: 25}\r\n]\r\n\r\n * \r\n * \r\n * \r\n */\r\nconst except = function (a, b, k) {\r\n    return [...a, ...b].filter(i => ![a, b].every(t => (k ? t.map(i => i[k]).includes(i[k]) : t.includes(i))))\r\n}\r\nexport default except\r\n","/**\r\n * @description: 交换数组中任一两个值的位置\r\n * @param {Array} arr:数组\r\n * @param {Number} oldIndex：老位置索引\r\n * @param {Number} newIndex：新位置索引\r\n * @param {Boolean} isChangeOldArr: 是否改变原数组\r\n * @return {Array} 返回一个数组\r\n */\r\nconst exchangePostion = function (arr, oldIndex, newIndex, isChangeOldArr = false) {\r\n    let a = isChangeOldArr ? arr : JSON.parse(JSON.stringify(arr))\r\n    a.splice(oldIndex, 1, a.splice(newIndex, 1, a[oldIndex])[0])\r\n    return a\r\n}\r\nexport default exchangePostion\r\n\r\n/**\r\n *\r\n * 示例：\r\n *\r\n * let a1 = [1, 2, 3, 4, 5, 6]\r\n *\r\n * exchangePostion(a1, 4, 1)// [1, 5, 3, 4, 2, 6]\r\n *\r\n * a1 //[1, 2, 3, 4, 5, 6]\r\n *\r\n * let a1 = [1, 2, 3, 4, 5, 6]\r\n *\r\n * exchangePostion(a1, 4, 1，true)// [1, 5, 3, 4, 2, 6]\r\n *\r\n * a1 // [1, 5, 3, 4, 2, 6]\r\n *\r\n *\r\n *\r\n *\r\n *\r\n */\r\n","/**\r\n * 指定深度扁平化数组\r\n * @param {Array} arr :扁平化的数组\r\n * @param {Number} depth：扁平化的层级\r\n */\r\nconst flatten = function (arr, depth = 1) {\r\n    return arr.reduce((a, v) => a.concat(depth > 1 && Array.isArray(v) ? flatten(v, depth - 1) : v), [])\r\n}\r\nexport default flatten\r\n\r\n/**\r\n * 示例：\r\n *\r\n * flatten([1, 2, 3, [4, [5, 6, [7]]]]) //[1, 2, 3, 4, [5,6,[7]]]\r\n *\r\n * flatten([1, 2, 3, [4, [5, 6, [7]]]], 2) //[1, 2, 3, 4, 5,6,[7]]\r\n *\r\n *\r\n */\r\n","/**\r\n * @description: 一维数组转二维数组 (分组)\r\n * @param {Array} arr:数组\r\n * @param {Number} num: 平分基数（num 个为一组进行分组（归档））\r\n */\r\nconst group = function (arr, num) {\r\n    return [...Array(Math.ceil(arr.length / num)).keys()].reduce((p, _, i) => (p.push(arr.slice(i * num, (i + 1) * num)), p), [])\r\n}\r\nexport default group\r\n\r\n/**\r\n *\r\n * 示例：\r\n *\r\n * group([1,2,3,4,5,6,7,8,9,10],2) // [[1,2],[3,4],[5,6],[7,8],[9.10]]\r\n *\r\n * group([1,2,3,4,5,6,7,8,9,10],3) // [[1,2,3],[4,5,6],[7,8,9],[10]]\r\n *\r\n *\r\n *\r\n *\r\n *\r\n */\r\n","/**\r\n * 返回数组中某值的所有索引，数组形式返回\r\n * @param {Array} a:数组\r\n * @param {String} k: 键名\r\n * @param {String} v: 键值\r\n */\r\nconst indexOfAll = (a, k, v) => a.reduce((p, c, i) => ((v ? c[k] === v : c === k) ? [...p, i] : p), [])\r\n\r\nexport default indexOfAll\r\n\r\n/**\r\n * 示例：\r\n *\r\n *\r\n * let a1 = [\r\n *  { id: 1, name: '张三', age: 20, count: 100 },\r\n *  { id: 2, name: '李四', age: 21, count: 50 },\r\n *  { id: 2, name: '大卫', age: 21, count: 50 },\r\n *  { id: 3, name: '阿呆', age: 23, count: 55 },\r\n *  { id: 3, name: '阿呆', age: 23, count: 55 }\r\n * ]\r\n * indexOfAll([1, 2, 3, 1, 2, 3], 1) // [0,3])\r\n * indexOfAll(a1, 'id', 3) // [3,4])\r\n *\r\n *\r\n *\r\n */\r\n","/**\r\n * @description: 指定数组中某个索引的值 取出来，再插入到数组的任一位置\r\n * @param {Array} arr:被操作数组\r\n * @param {Number} oldIndex：老位置索引\r\n * @param {Number} newIndex：新位置索引\r\n * @param {Boolean} isChangeOldArr: 是否改变原数组\r\n * @return Array 返回一个数组\r\n */\r\nconst insetPostion = function (arr, oldIndex, newIndex, isChangeOldArr = false) {\r\n    let a = isChangeOldArr ? arr : JSON.parse(JSON.stringify(arr))\r\n    a.splice(newIndex, 0, a.splice(oldIndex, 1)[0])\r\n    return a\r\n}\r\nexport default insetPostion\r\n\r\n/**\r\n * 示例：\r\n *\r\n *\r\n * let a1 = [1, 2, 3, 4, 5, 6]\r\n *\r\n * insetPostion(a1, 3, 1) // [1, 4, 2, 3, 5, 6]\r\n *\r\n * a1 // [1, 2, 3, 4, 5, 6]\r\n *\r\n *\r\n */\r\n","import isEquals from '../base/isEquals'\r\n/**\r\n * @description: 数组内是否有重复值\r\n * @param {Array} arr: 被检测的数组\r\n * @return Boolean\r\n */\r\nconst isRepeat = function (arr) {\r\n    let len = arr.length\r\n    try {\r\n        for (let i = 0; i < len; i++) {\r\n            for (let k = i + 1; k < len; k++) {\r\n                if (isEquals(arr[i], arr[k])) {\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n        return false\r\n    } catch (e) {\r\n        return len !== unique(arr).length\r\n    }\r\n}\r\nexport default isRepeat\r\n\r\n/**\r\n *\r\n * 示例：\r\n *\r\n * let a1 = [\r\n *   { id: 1, name: '张三', age: 20 },\r\n *   { id: 1, name: '李四', age: 20 },\r\n *   { id: 3, name: '小明', age: 23 },\r\n *    { id: 2, name: '大卫', age: 21 },\r\n *   1,\r\n *   3,\r\n *   2,\r\n *   { 0: 1, 1: 2, 2: 3 },\r\n *   [1, 2, 3]\r\n * ]\r\n * isHasRepeat(a1) // false\r\n * let a2 = [\r\n *   { id: 1, name: '张三', age: 20 },\r\n *   { id: 1, name: '张三', age: 20 },\r\n *   { id: 1, name: '李四', age: 20 },\r\n *   { id: 3, name: '小明', age: 23 },\r\n *   { id: 2, name: '大卫', age: 21 },\r\n *   1,\r\n *   3,\r\n *   2,\r\n *   { 0: 1, 1: 2, 2: 3 },\r\n *   [1, 2, 3]\r\n * ]\r\n * isHasRepeat(a2) // true\r\n *\r\n *\r\n *\r\n *\r\n */\r\n","/**\r\n * 数组平均数\r\n * @param {Array} a:数组\r\n * @param {Function | String} f:函数 或 key\r\n */\r\nconst mean = function (a, f) {\r\n    return (f ? a.map(typeof f === 'function' ? f : v => v[f]) : a).reduce((acc, val) => acc + val * 1, 0) / a.length\r\n}\r\nexport default mean\r\n\r\n/**\r\n * 示例：\r\n *\r\n * mean([{ n: 4 }, { n: 2 }, { n: 8 }, { n: 6 }], o => o.n) // 5\r\n * mean([{ n: 4 }, { n: 2 }, { n: 8 }, { n: 6 }], 'n') // 5\r\n * mean([4, 2, 8, 6]) // 5\r\n * mean(['4', 2, '8', 6]) //5\r\n *\r\n *\r\n */\r\n","/**\r\n * @description: 生成 起止数字间（包含起止数字）的升序数组\r\n * @param {Number} min : 最小值\r\n * @param {Number} max ：最大值\r\n */\r\nconst range = function (min, max) {\r\n    return Array.from({ length: max - min + 1 }, (_, i) => i + min)\r\n}\r\nexport default range\r\n\r\n/**\r\n * 示例：\r\n *\r\n * range(0,10) // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n * range(1,9)  // [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n *\r\n */\r\n","/**\r\n * 生成两数之间指定长度（所需产生的个数）的随机数组\r\n * @param {Number} min：起始值\r\n * @param {Number} max：结束值\r\n * @param {Number} n：指定生成的个数，默认1\r\n * @param {Boolean} isRepeat：是否重复,默认重复\r\n */\r\nconst rangeRandom = function (min = 0, max = 0, n = 1, isRepeat = true) {\r\n    if (isRepeat) {\r\n        return Array.from({ length: n }, () => Math.floor(Math.random() * (max - min + 1)) + min)\r\n    } else {\r\n        let arr = Array.from({ length: max - min + 1 }, (_, i) => i + min)\r\n        let num = n > arr.length ? arr.length : n\r\n        let ret = []\r\n        while (ret.length != num) {\r\n            let random = arr[Math.floor(Math.random() * arr.length)]\r\n            !ret.includes(random) && ret.push(random)\r\n        }\r\n        return ret\r\n    }\r\n}\r\nexport default rangeRandom\r\n/**\r\n * 示例：\r\n *\r\n * rangeRandom(0,10) //\r\n * rangeRandom(0,10,3) //\r\n * rangeRandom(0,10,9,false) //\r\n *\r\n */\r\n","/**\r\n * @description: 生成 最小数字 0 到max最大值 的升序数组\r\n * @param {Number} max ：最大值\r\n */\r\nconst rangeScopeStartZore = function (max) {\r\n    return [...Object.keys(max).keys()]\r\n}\r\nexport default rangeScopeStartZore\r\n\r\n/**\r\n * 示例：\r\n *\r\n * rangeScopeStartZore(10) //[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n * rangeScopeStartZore(5)  //[0, 1, 2, 3, 4, 5]\r\n *\r\n */\r\n","/**\r\n * 生成指定范围内指定步长的数组\r\n * @param {Number} start : 起始值\r\n * @param {Number} stop : 结束值\r\n * @param {Number} step : 步长\r\n */\r\nconst rangeStep = function (start, stop, step) {\r\n    return Array.from({ length: (stop - start) / step + 1 }, (_, i) => start + i * step)\r\n}\r\nexport default rangeStep\r\n\r\n/**\r\n * 示例：\r\n *\r\n * rangeStep(0,19,2) // [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]\r\n * rangeStep(0,19,3) // [0, 3, 6, 9, 12, 15, 18]\r\n * rangeStep(0,19,4) // [0, 4, 8, 12, 16]\r\n *\r\n */\r\n","/**\r\n * 指定数组中获取随机数(1 位)\r\n * 不限 json 数组\r\n * @param {Array} arr :数组\r\n */\r\nconst sample = function (arr) {\r\n    return arr[Math.floor(Math.random() * arr.length)]\r\n}\r\nexport default sample\r\n\r\n/**\r\n *\r\n * 示例：\r\n *\r\n * sample([1,2,3,4,5])//\r\n *\r\n * sample([{id:1},{id:2},{id:3}])//\r\n *\r\n *\r\n */\r\n","/**\r\n * @description: 求和\r\n * @param  {Array} a ：传入的数组\r\n * @return {Number} 和\r\n */\r\nconst sum = function (a, k) {\r\n    return a.reduce((p, c) => p + (k ? c[k] || 0 : c), 0)\r\n}\r\nexport default sum\r\n\r\n/***\r\n * \r\n * \r\n * \r\nlet a = [1, 2, 3, 4, 5]\r\n\r\nsum(a) // 15\r\n​\r\nlet a1 = [\r\n    { id: 1, name: '张三', age: 20 },\r\n    { id: 2, name: '李四', age: 21 },\r\n    { id: 3, name: '小二', age: 23 }\r\n]\r\n\r\nsum(a1, 'age') //64 \r\n * \r\n * \r\n * \r\n * \r\n * \r\n * \r\n */\r\n","/**\r\n * 数组中出现次数统计\r\n * @param {Array} a：数组\r\n * @param {String} k：键名 | 键值\r\n * @param {any} v：键值\r\n */\r\nconst timesTotal = (a, k, v) => a.reduce((p, c) => ((v ? c[k] === v : c === k) ? p + 1 : p), 0)\r\n\r\nexport default timesTotal\r\n\r\n/**\r\n * 示例：\r\n *\r\n * let a1 = [1, 2, 3, 1, 5, 6, 1]\r\n *\r\n * timesTotal(a1, 1) // 3\r\n *\r\n * timesTotal([{a:1},{a:1}],'a',1) // 2\r\n *\r\n */\r\n","import isEquals from '../base/isEquals'\r\n/**\r\n * @description: 数组去重\r\n * @param {Array} a：需要去重的数组\r\n * @param {String} k：键名\r\n */\r\nconst unique = function (a, k) {\r\n    let ret = []\r\n    if (k) {\r\n        ret = a.reduce((p, c) => (p.map(i => i[k]).includes(c[k]) ? p : [...p, c]), [])\r\n    } else {\r\n        for (let i = 0, len = a.length; i < len; i++) {\r\n            if (i == 0) {\r\n                ret.push(a[i])\r\n            } else {\r\n                if (!ret.some(k => isEquals(k, a[i]))) {\r\n                    ret.push(a[i])\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return ret\r\n}\r\nexport default unique\r\n\r\n/**\r\n * 示例：\r\n * \r\nlet a = [1, 2, 3, 4, 5, 1, 2, 3]\r\n\r\nunique(a) // [1,2,3,4,5]\r\n\r\nlet a1 = [\r\n    { id: 1, name: '张三', age: 20 },\r\n    { id: 2, name: '李四', age: 21 },\r\n    { id: 3, name: '小红', age: 23 },\r\n    { id: 2, name: '李四', age: 21 }\r\n]\r\n\r\nunique(a1)\r\n//\r\n[\r\n{id: 1, name: \"张三\", age: 20},\r\n{id: 2, name: '李四', age: 21 },\r\n{id: 3, name: \"小红\", age: 23}\r\n]\r\n \r\n\r\n * \r\n * \r\n */\r\n","\r\n/**\r\n * @description: json 数组项重组\r\n * @param {*} arr\r\n * @param {*} key\r\n * @param {*} value\r\n */\r\nconst make =  function(arr, k1, k2) {\r\n    return arr.reduce((p, c) => [...p, { [c[k1]]: c[k2] }], [])\r\n}\r\nexport default make\r\n\r\n/*\r\n示例：\r\nlet arr = [\r\n    {uuid: \"32317268-a82f-384c-33a1-20b48c69fa07\", name: \"张三\", time: \"2021-06-28 15:07:18\", age: 20}\r\n    {uuid: \"514c416f-379b-fc13-853c-291026504bb9\", name: \"李四\", time: \"2021-06-29 15:07:18\", age: 21}\r\n    {uuid: \"e2b03c8b-654a-3c48-c853-19aeccf4d00e\", name: \"小红\", time: \"2021-06-30 15:07:18\", age: 22}\r\n    {uuid: \"d1135ef4-f11e-d9ee-39b2-82119174fd5c\", name: \"李明\", time: \"2021-07-01 15:07:18\", age: 23}\r\n]\r\n// 数组项 指定某项值 为 key，某项值 为 value\r\nrutils.make(arr, 'uuid', 'age')\r\n\r\n[\r\n    {32317268-a82f-384c-33a1-20b48c69fa07: 20}\r\n    {514c416f-379b-fc13-853c-291026504bb9: 21}\r\n    {e2b03c8b-654a-3c48-c853-19aeccf4d00e: 22}\r\n    {d1135ef4-f11e-d9ee-39b2-82119174fd5c: 23}\r\n]\r\n*/","/**\r\n * @description: json数组项属性筛选\r\n * @param {*} arr \r\n * @param {*} keys\r\n */\r\nconst pick = function pick(arr, keys) {\r\n    return arr.reduce((p, c) => [...p, keys.reduce((p1, c1) => ({ ...p1, [c1]: c[c1] }), {})], [])\r\n}\r\nexport default pick\r\n\r\n/**\r\n * \r\n * 示例：\r\n * \r\n * \r\nlet arr = [\r\n    {uuid: \"32317268-a82f-384c-33a1-20b48c69fa07\", name: \"张三\", time: \"2021-06-28 15:07:18\", age: 20}\r\n    {uuid: \"514c416f-379b-fc13-853c-291026504bb9\", name: \"李四\", time: \"2021-06-29 15:07:18\", age: 21}\r\n    {uuid: \"e2b03c8b-654a-3c48-c853-19aeccf4d00e\", name: \"小红\", time: \"2021-06-30 15:07:18\", age: 22}\r\n    {uuid: \"d1135ef4-f11e-d9ee-39b2-82119174fd5c\", name: \"李明\", time: \"2021-07-01 15:07:18\", age: 23}\r\n]\r\n\r\nrutils.pick(arr,['uuid','name'])\r\n\r\n\r\n[\r\n    {uuid: \"32317268-a82f-384c-33a1-20b48c69fa07\", name: \"张三\"}\r\n    {uuid: \"514c416f-379b-fc13-853c-291026504bb9\", name: \"李四\"}\r\n    {uuid: \"e2b03c8b-654a-3c48-c853-19aeccf4d00e\", name: \"小红\"}\r\n    {uuid: \"d1135ef4-f11e-d9ee-39b2-82119174fd5c\", name: \"李明\"}\r\n]\r\n\r\n * \r\n * \r\n * \r\n * \r\n * \r\n * \r\n */","/**\r\n * @description: 根据 id 获取 tree 的节点\r\n * @param {Array} list ：树数组\r\n * @param {String} id： id 值\r\n * @param {String} link: id 别名\r\n */\r\nconst getTreeNode = function (list, id, link = 'id') {\r\n  for (let i = 0, len = list.length; i < len; i++) {\r\n    const item = list[i]\r\n    if (item[link] === id) return item\r\n    if (item.children && item.children.length) {\r\n      const res = getTreeNode(item.children, id, link)\r\n      if (res) return res\r\n    }\r\n  }\r\n}\r\nexport default getTreeNode\r\n","/*\r\n * @Description: 数组按标识进行分组\r\n * @Author: shufei\r\n * @Date: 2021-08-26 20:09:45\r\n * @LastEditTime: 2021-09-02 19:24:47\r\n * @LastEditors: shufei\r\n */\r\n\r\n/**\r\n * @description: 数组按标识进行分组 （分组后顺序不变）\r\n * @param {Array} list：分组的数组\r\n * @param {String} typeStr：分组的标识\r\n * @return {Array}\r\n */\r\nconst arrayGroup = function(list,typeStr){\r\n    const ret = [] \r\n    let p = 0\r\n    let n = 0\r\n    for(let i=1,len=list.length;i<len;i++){\r\n      const pre = list[i-1]\r\n      const cur = list[i]\r\n      if(pre[typeStr]!==cur[typeStr]){\r\n        n = i\r\n        ret.push(list.slice(p,n))\r\n        p = i\r\n      }\r\n      if(i===len-1)ret.push(list.slice(p))\r\n    }\r\n    return ret\r\n}\r\nexport default arrayGroup\r\n\r\n/**\r\n * 示例：\r\n * \r\n * const list = [ \r\n    {name:'1',type:0}, \r\n    \r\n    {name:'2',type:1}, \r\n    {name:'3',type:1}, \r\n    {name:'4',type:1}, \r\n\r\n    {name:'5',type:0}, \r\n    {name:'6',type:0}, \r\n\r\n    {name:'7',type:2}, \r\n    {name:'8',type:2}, \r\n    {name:'9',type:2}, \r\n\r\n    {name:'10',type:0},\r\n    {name:'11',type:0}, \r\n  ]\r\n * 需求=> 转换成\r\n *  [ \r\n    \r\n    [{name:'1',type:0}], \r\n\r\n    [{name:'2',type:1}, {name:'3',type:1}, {name:'4',type:1}], \r\n\r\n    [{name:'5',type:0}, {name:'6',type:0}], \r\n\r\n    [{name:'7',type:2}, {name:'8',type:2}, {name:'9',type:2}], \r\n\r\n    [{name:'10',type:0},{name:'11',type:0}], \r\n  ]\r\n * \r\n * arrayGroup(list,'type')\r\n */","/*\r\n * @Description: 数组值访问 - arrayAt\r\n * @Author: shufei\r\n * @Date: 2021-09-08 19:42:26\r\n * @LastEditTime: 2021-09-08 19:44:21\r\n * @LastEditors: shufei\r\n */\r\n/**\r\n * @description: 根据索引访问数组项\r\n * @param { Array } arr：数组\r\n * @param { Number } index：索引，默认 0\r\n */\r\nconst arrayAt = function (arr, index = 0) {\r\n    return index < 0 ? arr[arr.length + index] : arr[index]\r\n}\r\nexport default arrayAt\r\n\r\n/*\r\n\r\n[1,2,3,4].at() // 1\r\n[1,2,3,4].at(1) // 2\r\n[1,2,3,4].at(2) // 3\r\n[1,2,3,4].at(3) // 4\r\n[1,2,3,4].at(4) // undefined\r\n\r\n[1,2,3,4].at(-1) // 4\r\n[1,2,3,4].at(-2) // 3\r\n[1,2,3,4].at(-3) // 2\r\n[1,2,3,4].at(-4) // 1\r\n[1,2,3,4].at(-5) // undefined\r\n\r\narrayAt([1,2,3,4]) // 1\r\narrayAt([1,2,3,4],1) // 2\r\narrayAt([1,2,3,4],2) // 3\r\narrayAt([1,2,3,4],3) // 4\r\narrayAt([1,2,3,4],4) // undefined\r\n\r\narrayAt([1,2,3,4],-1) // 4\r\narrayAt([1,2,3,4],-2) // 3\r\narrayAt([1,2,3,4],-3) // 2\r\narrayAt([1,2,3,4],-4) // 1\r\narrayAt([1,2,3,4],-5) // undefined\r\n\r\n\r\n*/\r\n","/*\r\n * @Description: 数组重复 - arrayRepeat\r\n * @Author: shufei\r\n * @Date: 2021-09-08 19:03:17\r\n * @LastEditTime: 2021-09-08 19:03:17\r\n * @LastEditors: shufei\r\n */\r\n/**\r\n * @description: 数组复制\r\n * @param {Array} arr:需要复制的数组\r\n * @param {Number} n: 复制的次数，默认 0\r\n */\r\nconst arrayRepeat = function(arr, n = 0) {\r\n    let base = 0\r\n    let res = arr\r\n    while (base < n) {\r\n        res = res.concat(arr)\r\n        base++\r\n    }\r\n    return res\r\n}\r\nexport default arrayRepeat\r\n\r\n/**\r\n\r\narrayRepeat([1, 2, 3]) // [1, 2, 3]    不传复制次数 默认是不复制 返回原数组\r\narrayRepeat([1, 2, 3], 1) //  [1, 2, 3, 1, 2, 3] 复制 1 遍\r\narrayRepeat([1, 2, 3], 2) // [1, 2, 3, 1, 2, 3, 1, 2, 3] 复制 2 遍\r\narrayRepeat([1, 2, 3], 3) // [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3] 复制 3 遍\r\narrayRepeat([{ name: 'lisi' }], 1) // [{name: \"lisi\"},{name: \"lisi\"}] 复制 1 遍\r\n\r\n\r\n*/","/*\r\n * @Description: 数组截取 - arraySubstr\r\n * @Author: shufei\r\n * @Date: 2021-09-08 19:04:50\r\n * @LastEditTime: 2021-09-08 19:04:50\r\n * @LastEditors: shufei\r\n */\r\n/**\r\n * @description: 让数组拥有和字符串的substr 一样的功能\r\n * @param { Array } arr：数组\r\n * @param { Number } startIndex：开始截取的索引值\r\n * @param { Number} len：截取的长度\r\n */\r\nconst arraySubstr = function (arr, startIndex, len) {\r\n    return arr.slice(startIndex, startIndex + len)\r\n}\r\nexport default arraySubstr\r\n\r\n/**\r\n\r\nlet arr = [1, 2, 3, 4, 5]\r\n\r\narraySubstr(arr, 0, 1) // [1]\r\narraySubstr(arr, 0, 2) // [1,2]\r\narraySubstr(arr, 0, 3) // [1,2,3]\r\narraySubstr(arr, 1, 3) // [2,3,4]\r\n\r\n'12345'.substr(0,1) // '1'\r\n'12345'.substr(0,2) // '12'\r\n'12345'.substr(0,3) // '123'\r\n'12345'.substr(1,3) // '234'\r\n\r\n\r\n*/","/*\r\n * @Description: 删除数组多项值 - delByIndexs\r\n * @Author: shufei\r\n * @Date: 2021-09-08 19:01:10\r\n * @LastEditTime: 2021-09-08 19:03:03\r\n * @LastEditors: shufei\r\n */\r\nconst delByIndexs = function (arr, delIndexs,isDeep = true) {\r\n    // 是否克隆，有时候你不想影响原数组，就需要克隆\r\n    if(isDeep) arr = JSON.Parse(JSON.stringify(arr))\r\n    // 先排序成降序,从后往前删除\r\n    delIndexs = delIndexs.sort((a, b) => b - a)\r\n    for (let i = 0; i < delIndexs.length; i++) {\r\n        arr.splice(delIndexs[i], 1)\r\n    }\r\n    return arr\r\n}\r\nexport default delByIndexs\r\n\r\n/**\r\n\r\nconst list = [{ id: 1 }, { id: 2 }, { id: 3 }, { id: 4 }, { id: 5 }, { id: 6 }, { id: 7 }]\r\n\r\n// findIndexs 在上面已经实现，查询满足条件的所有所有值\r\nconst delIndexs = findIndexs(list, i => [2, 4, 7].includes(i.id)) // [1, 3, 6]\r\n\r\ndelByIndexs(list, delIndexs) // [{ id: 1 }, { id: 3 },  { id: 5 }, { id: 6 }]\r\n\r\n\r\n*/","/*\r\n * @Description: 查询满足条件的所有索引 - findIndexs\r\n * @Author: shufei\r\n * @Date: 2021-09-08 18:57:03\r\n * @LastEditTime: 2021-09-08 18:59:33\r\n * @LastEditors: shufei\r\n */\r\nconst findIndexs = function (arr, cb) {\r\n    const ret = []\r\n    for (let i = 0; i < arr.length; i++) {\r\n        if (cb(arr[i])) {\r\n            ret.push(i)\r\n        }\r\n    }\r\n    return ret\r\n}\r\n\r\nexport default findIndexs\r\n/**\r\n\r\nconst list = [{ id: 1 }, { id: 2 }, { id: 3 }, { id: 4 }, { id: 5 }, { id: 6 }, { id: 7 }]\r\n\r\nfindIndexs(list, i => [2, 4, 7].includes(i.id)) // [1, 3, 6]\r\n\r\n\r\n*/","/*\r\n * @Description: 条件分组 - groupArchive\r\n * @Author: shufei\r\n * @Date: 2021-09-08 19:49:27\r\n * @LastEditTime: 2021-09-08 19:49:28\r\n * @LastEditors: shufei\r\n */\r\n/**\r\n * @description:归档， 对一维 json 数组进行归档（根据 key）\r\n * @param {Array} arr:一维数组\r\n * @param {String} key：key 字符串\r\n */\r\nconst groupArchive = function (arr, key) {\r\n    return [...new Set(arr.map(i => i[key]))].reduce((p, c) => [...p, arr.filter(i => i[key] === c)], [])\r\n}\r\nexport default groupArchive\r\n /*  \r\n  let books = [\r\n      { date: '2月', name: '化学书' },\r\n      { date: '1月', name: '历史书' },\r\n      { date: '2月', name: '数学书' },\r\n      { date: '3月', name: '语文书' },\r\n      { date: '1月', name: '地理书' }\r\n  ]\r\n  groupArchive(books, 'date')\r\n \r\n  [\r\n      [\r\n          {date: \"2月\", name: \"化学书\"}\r\n          {date: \"2月\", name: \"数学书\"}\r\n      ],\r\n       [\r\n          {date: \"1月\", name: \"历史书\"}\r\n          {date: \"1月\", name: \"地理书\"}\r\n      ],\r\n       [\r\n          {date: \"3月\", name: \"语文书\"}\r\n      ],\r\n  ]        \r\n  */\r\n","/*\r\n * @Description: 状态分组 - groupState\r\n * @Author: shufei\r\n * @Date: 2021-09-08 19:50:20\r\n * @LastEditTime: 2021-09-08 20:00:16\r\n * @LastEditors: shufei\r\n */\r\n/**\r\n * @description: 数组按标识进行分组 （分组后顺序不变）\r\n * @param {Array} list：分组的数组\r\n * @param {String} typeStr：分组的标识\r\n * @return {Array}\r\n */\r\nconst groupState = function(list,typeStr){\r\n    const ret = [] \r\n    let p = 0\r\n    let n = 0\r\n    for(let i=1,len=list.length;i<len;i++){\r\n      if(list[i-1][typeStr] !== list[i][typeStr]){\r\n        n = i\r\n        ret.push(list.slice(p,n))\r\n        p = i\r\n      }\r\n      if(i===len-1)ret.push(list.slice(p))\r\n    }\r\n    return ret\r\n}\r\nexport default groupState\r\n    \r\n/**\r\n * 示例：\r\n * \r\n * const list = [ \r\n\r\n    {name:'1',type:0}, \r\n    {name:'2',type:1}, \r\n    {name:'3',type:1}, \r\n    {name:'4',type:1}, \r\n\r\n    {name:'5',type:0}, \r\n    {name:'6',type:0}, \r\n\r\n    {name:'7',type:2}, \r\n    {name:'8',type:2}, \r\n    {name:'9',type:2}, \r\n\r\n    {name:'10',type:0},\r\n    {name:'11',type:0}, \r\n\r\n  ]\r\n * 需求=> 转换成\r\n *  [ \r\n    [{name:'1',type:0}], \r\n    \r\n    [{name:'2',type:1}, {name:'3',type:1}, {name:'4',type:1}], \r\n    \r\n    [{name:'5',type:0}, {name:'6',type:0}], \r\n    \r\n    [{name:'7',type:2}, {name:'8',type:2}, {name:'9',type:2}], \r\n    \r\n    [{name:'10',type:0},{name:'11',type:0}], \r\n  ]\r\n * \r\n * groupState(list,'type')\r\n */\r\n","/*\r\n * @Description: lastFind 反向查找\r\n * @Author: shufei\r\n * @Date: 2021-09-08 18:55:37\r\n * @LastEditTime: 2021-09-08 18:55:38\r\n * @LastEditors: shufei\r\n */\r\nconst lastFind = function (arr, cb) {\r\n    for (let i = arr.length - 1; i >= 0; i--) {\r\n        if (cb(arr[i])) return arr[i]\r\n    }\r\n}\r\nexport default lastFind\r\n\r\n/* \r\nconst list = [\r\n    { type: 1, subType: 11 },\r\n    { type: 2, subType: 22 },\r\n    { type: 3, subType: 33 },\r\n    { type: 4, subType: 44 },\r\n    { type: 5, subType: 55 },\r\n    { type: 3, subType: 34 },\r\n    { type: 7, subType: 77 }\r\n]\r\nlist.find(i => i.type == 3) //{type: 3, subType: 33}\r\nlastFind(list, i => i.type == 3) //{type: 3, subType: 34}\r\nlastFind(list, i => i.type == 33) //undefined\r\n*/","/*\r\n * @Description: lastFindIndex 反向查询索引\r\n * @Author: shufei\r\n * @Date: 2021-09-08 18:52:40\r\n * @LastEditTime: 2021-09-08 18:55:01\r\n * @LastEditors: shufei\r\n */\r\nconst lastFindIndex = function (arr, cb) {\r\n    for (let i = arr.length - 1; i >= 0; i--) {\r\n        if (cb(arr[i])) return i\r\n    }\r\n    return -1\r\n}\r\n\r\nexport default lastFindIndex\r\n\r\n/**\r\n\r\nconst list = [{ id: 1 }, { id: 2 }, { id: 3 }, { id: 4 }, { id: 5 }, { id: 3 }, { id: 7 }]\r\n\r\nlastFindIndex(list, i => i.id == 3) // 5\r\n\r\nlastFindIndex(list, i => i.id == 33) // -1\r\n\r\n\r\n*/","/*\r\n * @Description: 生成 起止数字间（包含起止数字）的升序数组\r\n * @Author: shufei\r\n * @Date: 2021-09-08 19:53:20\r\n * @LastEditTime: 2021-09-08 19:53:20\r\n * @LastEditors: shufei\r\n */\r\n/**\r\n * @description: 生成 起止数字间（包含起止数字）的升序数组\r\n * @param {Number} min : 最小值\r\n * @param {Number} max ：最大值\r\n */\r\nconst rangeGenerater = function (min, max) {\r\n    return Array.from({ length: max - min + 1 }, (_, i) => i + min)\r\n}\r\nexport default rangeGenerater\r\n\r\n/*\r\n\r\n\r\nrangeGenerater(5,10) // [5, 6, 7, 8, 9, 10]\r\nrangeGenerater(0,10)//[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n\r\n*/","/*\r\n * @Description: 数组状态还原\r\n * @Author: shufei\r\n * @Date: 2021-08-26 19:22:41\r\n * @LastEditTime: 2021-09-19 23:35:41\r\n * @LastEditors: Please set LastEditors\r\n */\r\nimport deepClone from \"../object/deepClone\"\r\n/**\r\n * @description: 数组状态还原\r\n * @param { Array } list: 有两值交换后的数组\r\n * @param { Number } oldIndex: 交换项索引\r\n * @param { Number } newIndex：被交换项索引\r\n * @param { Boolean } isDeep：是否给改变原数组\r\n */\r\nconst arrayRestore = function (list, oldIndex, newIndex,isDeep=false) {\r\n    if(!isDeep)list = deepClone(list)\r\n    list.splice(oldIndex, 0, list.splice(newIndex, 1)[0])\r\n    return list\r\n}\r\nexport default arrayRestore"],"names":["isEquals","a","b","Date","getTime","_typeof","prototype","keys","Object","length","Array","isArray","type","every","k","o","toString","call","slice","isType","val","value","toLowerCase","deepClone","obj","parents","children","_clone","parent","child","RegExp","source","getRegExp","lastIndex","proto","getPrototypeOf","create","i","index","indexOf","push","union","concat","filter","map","includes","intersection","t","archive","arr","key","from","Set","reduce","p","c","arrayFill","len","fill","arrayToObject","entries","arrayToTree","id","link","delBy","JSON","parse","stringify","splice","item","except","exchangePostion","oldIndex","newIndex","flatten","depth","v","group","num","_toConsumableArray","Math","ceil","_","indexOfAll","insetPostion","isRepeat","e","unique","mean","f","acc","range","min","max","rangeRandom","n","floor","random","ret","rangeScopeStartZore","rangeStep","start","stop","step","sample","sum","timesTotal","some","make","k1","k2","pick","p1","c1","getTreeNode","list","res","arrayGroup","typeStr","pre","cur","arrayAt","arrayRepeat","base","arraySubstr","startIndex","delByIndexs","delIndexs","Parse","sort","findIndexs","cb","groupArchive","groupState","lastFind","lastFindIndex","rangeGenerater","arrayRestore"],"mappings":"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"}