{"version":3,"file":"index.js","sources":["../../../src/lib/number/round.js","../../../src/lib/number/calc.js","../../../src/lib/number/isNum.js","../../../src/lib/number/index.js","../../../src/lib/number/add.js","../../../src/lib/number/devide.js","../../../src/lib/number/fmtNum.js","../../../src/lib/number/multiply.js","../../../src/lib/number/subtract.js","../../../src/lib/number/isInteger.js","../../../src/lib/number/sumBigNumber.js"],"sourcesContent":["/**\r\n * 四舍五入到指定位数\r\n * @param {Number} n:小数\r\n * @param {Number} decimals ：四舍五入到指定位数\r\n */\r\nconst round = function (n, decimals) {\r\n    if (decimals === undefined) return n\r\n    return Number(Math.round(n + 'e' + (decimals || 0)) + 'e-' + (decimals || 0))\r\n}\r\nexport default round\r\n\r\n/**\r\n *\r\n * 示例：\r\n *\r\n * round(1.23456,1)// 1.2\r\n * round(1.23456,2)// 1.23\r\n * round(1.23456,3)// 1.235\r\n * round(1.23456,4)// 1.2346\r\n * round(1.23456,5)// 1.23456\r\n *\r\n */\r\n","import round from './round'\r\n/**\r\n * 计算方法 calc\r\n * @param { number } type ：0 加  1 减 2 乘 3 除\r\n * @param { String | Number } a ：计算数a\r\n * @param { String | Number } b ：计算数b\r\n * @param { Number } digit  ：结果保留的位数\r\n * @return Number | String\r\n */\r\nconst calc = function (type, a, b, digit) {\r\n    let r1, r2\r\n    try {\r\n        r1 = a.toString().split('.')[1].length\r\n    } catch (e) {\r\n        r1 = 0\r\n    }\r\n    try {\r\n        r2 = b.toString().split('.')[1].length\r\n    } catch (e) {\r\n        r2 = 0\r\n    }\r\n    let maxLen = Math.pow(10, Math.max(r1, r2))\r\n    let tyeps = [\r\n        round((Math.round(maxLen * a) + Math.round(maxLen * b)) / maxLen, digit), //加\r\n        round((Math.round(maxLen * a) - Math.round(maxLen * b)) / maxLen, digit), //减\r\n        round((Math.round(maxLen * a) * Math.round(maxLen * b)) / (maxLen * maxLen), digit), //乘\r\n        round(Math.round(maxLen * a) / Math.round(maxLen * b), digit) //除\r\n    ]\r\n    let str = String(round(tyeps[type], digit || 0))\r\n    if (digit) {\r\n        if (str.includes('.')) return str.split('.')[0] + '.' + str.split('.')[1].padEnd(digit, 0)\r\n        return (str + '.').padEnd((str + '.').length + digit, 0)\r\n    } else {\r\n        return tyeps[type]\r\n    }\r\n}\r\nexport default calc\r\n\r\n/**\r\n * 示例：\r\n *\r\n * // 减法 -\r\n * calc(0,2,2,2) //'0.00'\r\n * // 加法 +\r\n * calc(1,2,2,2) //'4.00'\r\n * // 乘法 ×\r\n * calc(2,2,3,2) //'6.00'\r\n * // 除法 ÷\r\n * calc(3,2,3,2) //'0.67'\r\n *\r\n *\r\n *\r\n */\r\n","/**\r\n * 判断是否是有效数字 不包含NaN\r\n * 是否有效数字：排除 NaN Infinity，数字字符串 或是 数字，都为有效数字\r\n */\r\nconst isNum = function (n) {\r\n    return typeof n == 'symbol' ? false : !isNaN(parseFloat(n)) && isFinite(n)\r\n}\r\nexport default isNum\r\n\r\n/**\r\n *\r\n * let arr = [{}, [], undefined, null, 123, '123', Symbol('111'), function () {}, new Date(), false, /\\d+/gi, NaN,Infinity]\r\n * arr.forEach(item => {\r\n *        console.log(isNum(item))\r\n *  })\r\n * // 4false 2true 7false\r\n *\r\n *\r\n *\r\n *\r\n */\r\n","import add from './add'\r\nimport calc from './calc'\r\nimport devide from './devide'\r\nimport fmtNum from './fmtNum'\r\nimport isNum from './isNum'\r\nimport multiply from './multiply'\r\nimport round from './round'\r\nimport subtract from './subtract'\r\nimport isInteger from './isInteger'\r\nimport sumBigNumber from './sumBigNumber'\r\n\r\nexport default {\r\n    add,\r\n    calc,\r\n    devide,\r\n    fmtNum,\r\n    isNum,\r\n    multiply,\r\n    round,\r\n    subtract,\r\n    isInteger,\r\n    sumBigNumber\r\n}\r\n","import calc from './calc'\r\n/**\r\n * 两数相加\r\n * @param {Number} a :加数\r\n * @param {Number} b ：被加数\r\n * @param {Number} digit ：结果保留位数\r\n */\r\nconst add = function (a, b, digit) {\r\n    return Array.isArray(a) ? (a.length ? a.reduce((p, c) => add(p, c, b), 0) : 0) : calc(0, a, b, digit)\r\n}\r\nexport default add\r\n\r\n/**\r\n *\r\n * 示例：\r\n *\r\n * add(0.1,0.2,3) //\"0.300\"\r\n *\r\n */\r\n/**\r\n *\r\n * 示例：\r\n *\r\n * add([0.1,0.2]) // 0.3\r\n * add([0.1,0.2],3)     // '0.300'\r\n * add([0.1,0.2,1,2],3) // '3.300'\r\n *\r\n *\r\n */\r\n","import calc from './calc'\r\n/**\r\n * 两数相除\r\n * @param {Number} a :除数\r\n * @param {Number} b ：被除数\r\n * @param {Number} digit ：结果保留位数\r\n */\r\nconst devide = function (a, b, digit) {\r\n    return Array.isArray(a) ? (a.length >= 2 ? a.reduce((p, c) => devide(p, c, b)) : '') : !a || !b ? '' : calc(3, a, b, digit)\r\n}\r\nexport default devide\r\n\r\n/**\r\n * 示例：\r\n *\r\n * devide() // \"\"\r\n * devide(1) // \"\"\r\n * devide(1,3) // 0.3333333333333333\r\n * devide(1,3,1) // \"0.3\"\r\n * devide(1,3,2) // \"0.33\"\r\n *\r\n *\r\n *\r\n *\r\n */\r\n/***\r\n * 示例：\r\n *\r\n * devide() // \"\"\r\n * devide([]) // \"\"\r\n * devide([1,3]) // 0.3333333333333333\r\n * devide([1,3,3]) // 0.1111111111111111\r\n * devide([1,9]) // 0.1111111111111111\r\n * devide([1,9],0) // 0\r\n * devide([1,9],1) // \"0.1\"\r\n * devide([1,9],2) // \"0.11\"\r\n * devide([1,9],3) // \"0.111\"\r\n *\r\n *\r\n *\r\n *\r\n *\r\n */\r\n","import isNum from './isNum'\r\nimport round from './round'\r\n/**\r\n * 数字格式化\r\n * @param { String | Number } val : 有效数数字\r\n * @param { Boolean } isThousands : 整数部分是否进行千分位,默认值 false\r\n * @param { Number } digit : 小数部分四舍五入保留到的位数\r\n * @param { Boolean } isCalc : 计算结果是否 数字化\r\n */\r\nconst fmtNum = function (val, isThousands = false, len,isCalc) {\r\n    // 无效值处理，，不符合传入规则的值一律返回空字符串\r\n    if (val === undefined || val == null) return ''\r\n    // 无论数字还是字符串数字，最终都转换成字符串数字\r\n    let str = val + ''\r\n    // 进行检测str是否是有效的数字,不是有效直接返回空字符串\r\n    if (!isNum(str)) return ''\r\n    // 是否是整数\r\n    let isInt = !str.includes('.')\r\n    len = len === undefined ? (isInt ? 0 : str.split('.')[1].length) : len\r\n    // 整数部分\r\n    let int = len == 0 ? Math.round(str) + '' : isInt ? str.split('.')[0] : (round(str * 1 + '', len) + '').split('.')[0]\r\n    // str 四舍五入到指定位数\r\n    str = round(str * 1 + '', len) + ''\r\n    // 小数部分\r\n    let dot = len == 0 || isInt ? '' : str.split('.')[1]\r\n    dot = (dot ? dot : '').padEnd(len, 0)\r\n    let ret = (isThousands ? int.replace(/(?=(?!\\b)(\\d{3})+$)/g, ',') : int) + (dot.length ? '.' + dot : '')\r\n    return isCalc?Number(ret):ret\r\n}\r\nexport default fmtNum\r\n\r\n/**\r\n * 示例：\r\n *\r\n * fmtNum() // \"\"\r\n * fmtNum(11111111111.333555) // \"11111111111.333555\"\r\n * fmtNum(11111111111.333555,false,3) // \"11111111111.334\"\r\n * fmtNum(11111111111.333555,true) // \"11,111,111,111.333555\"\r\n * fmtNum(11111111111.333555,true,3) // \"11,111,111,111.334\"\r\n *\r\n *\r\n *\r\n */\r\n","import calc from './calc'\r\n/**\r\n * 两数相乘\r\n * @param {*} a :乘数\r\n * @param {*} b ：被乘数\r\n * @param {*} digit ：结果保留位数\r\n */\r\nconst multiply = function (a, b, digit) {\r\n    return Array.isArray(a) ? (a.length ? a.reduce((p, c) => multiply(p, c, b), 1) : 0) : calc(2, a, b, digit)\r\n}\r\nexport default multiply\r\n\r\n/**\r\n * 示例：\r\n *\r\n *\r\n * multiply(1.1,2.2)    // 2.42\r\n * multiply(1.13,0.8,0) // 1\r\n * multiply(1.13,0.8,1) // \"0.9\"\r\n * multiply(1.13,0.8,2) // \"0.90\"\r\n * multiply(1.13,0.8,3) // \"0.904\"\r\n * multiply(1.13,0.8,4) // \"0.9040\"\r\n *\r\n *\r\n *\r\n *\r\n *\r\n */\r\n","import calc from './calc'\r\n/**\r\n * 两数相减\r\n * @param {Number} a :减数\r\n * @param {Number} b ：被减数\r\n * @param {Number} digit ：结果保留位数\r\n */\r\nconst subtract = function (a, b, digit) {\r\n    return Array.isArray(a) ? (a.length ? a.reduce((p, c) => subtract(p, c, b)) : 0) : calc(1, a, b, digit)\r\n}\r\nexport default subtract\r\n\r\n/**\r\n * 示例：\r\n *\r\n * subtract(0.1,0.12)   // -0.02\r\n * subtract(0.1,0.12,0) // 0\r\n * subtract(0.1,0.12,1) // \"0.0\"\r\n * subtract(0.1,0.12,2) // \"0.02\"\r\n * subtract(0.1,0.12,3) // \"-0.020\"\r\n *\r\n *\r\n *\r\n */\r\n/**\r\n * 示例：\r\n *\r\n *\r\n * subtract([1.1,3]) // -1.9\r\n * subtract([1.1,3],1) // \"-1.9\"\r\n * subtract([1.1,3],2) // \"-1.90\"\r\n *\r\n *\r\n */\r\n","/**\r\n * 是否为整数\r\n * @param {*} number \r\n * @return {Boolean}\r\n */\r\nconst isInteger = number => {\r\n    return typeof number === 'number' && !isNaN(number) && number % 1 === 0\r\n}\r\n\r\nexport default isInteger\r\n","/**\r\n * @description  字符串超大数相加\r\n * @param {String} a \r\n * @param {String} b \r\n * @returns String\r\n */\r\n\r\n const sumBigNumber = function(a, b) {\r\n    let res = '', //结果\r\n        temp = 0; //按位加的结果及进位\r\n    a = a.split('')\r\n    b = b.split('')\r\n    while (a.length || b.length || temp) {\r\n        //~~按位非 1.类型转换，转换成数字 2.~~undefined==0 \r\n        temp += ~~a.pop() + ~~b.pop()\r\n        res = (temp % 10) + res\r\n        temp = temp > 9\r\n    }\r\n    return res.replace(/^0+/, '')\r\n}\r\nexport default sumBigNumber"],"names":["round","n","decimals","undefined","Number","Math","calc","type","a","b","digit","r1","r2","toString","split","length","e","maxLen","pow","max","tyeps","str","String","includes","padEnd","isNum","_typeof","isNaN","parseFloat","isFinite","add","Array","isArray","reduce","p","c","devide","fmtNum","val","isThousands","len","isCalc","isInt","int","dot","ret","replace","multiply","subtract","isInteger","number","sumBigNumber","res","temp","pop"],"mappings":"sOAKc,SAARA,EAAkBC,EAAGC,eACNC,IAAbD,EAA+BD,EAC5BG,OAAOC,KAAKL,MAAMC,EAAI,KAAOC,GAAY,IAAM,MAAQA,GAAY,ICEjE,SAAPI,EAAiBC,EAAMC,EAAGC,EAAGC,OAC3BC,EAAIC,MAEJD,EAAKH,EAAEK,WAAWC,MAAM,KAAK,GAAGC,OAClC,MAAOC,GACLL,EAAK,MAGLC,EAAKH,EAAEI,WAAWC,MAAM,KAAK,GAAGC,OAClC,MAAOC,GACLJ,EAAK,MAELK,EAASZ,KAAKa,IAAI,GAAIb,KAAKc,IAAIR,EAAIC,IACnCQ,EAAQ,CACRpB,GAAOK,KAAKL,MAAMiB,EAAST,GAAKH,KAAKL,MAAMiB,EAASR,IAAMQ,EAAQP,GAClEV,GAAOK,KAAKL,MAAMiB,EAAST,GAAKH,KAAKL,MAAMiB,EAASR,IAAMQ,EAAQP,GAClEV,EAAOK,KAAKL,MAAMiB,EAAST,GAAKH,KAAKL,MAAMiB,EAASR,IAAOQ,EAASA,GAASP,GAC7EV,EAAMK,KAAKL,MAAMiB,EAAST,GAAKH,KAAKL,MAAMiB,EAASR,GAAIC,IAEvDW,EAAMC,OAAOtB,EAAMoB,EAAMb,GAAOG,GAAS,WACzCA,EACIW,EAAIE,SAAS,KAAaF,EAAIP,MAAM,KAAK,GAAK,IAAMO,EAAIP,MAAM,KAAK,GAAGU,OAAOd,EAAO,IAChFW,EAAM,KAAKG,QAAQH,EAAM,KAAKN,OAASL,EAAO,GAE/CU,EAAMb,wOC7BP,SAARkB,EAAkBxB,SACD,UAAZyB,EAAOzB,MAAyB0B,MAAMC,WAAW3B,KAAO4B,SAAS5B,UCM7D,CACX6B,ICLQ,SAANA,EAAgBtB,EAAGC,EAAGC,UACjBqB,MAAMC,QAAQxB,GAAMA,EAAEO,OAASP,EAAEyB,OAAO,SAACC,EAAGC,UAAML,EAAII,EAAGC,EAAG1B,IAAI,GAAK,EAAKH,EAAK,EAAGE,EAAGC,EAAGC,IDK/FJ,KAAAA,EACA8B,OEPW,SAATA,EAAmB5B,EAAGC,EAAGC,UACpBqB,MAAMC,QAAQxB,GAAkB,GAAZA,EAAEO,OAAcP,EAAEyB,OAAO,SAACC,EAAGC,UAAMC,EAAOF,EAAGC,EAAG1B,KAAM,GAAOD,GAAMC,EAASH,EAAK,EAAGE,EAAGC,EAAGC,GAAnB,IFOlG2B,OGNW,SAAUC,EAAV,EAAA,EAAA,OAAeC,+BAAf,GAAA,EAAoCC,qBAApC,SAAwCC,qBAAxC,iBAECtC,IAARmC,GAA4B,MAAPA,EAAa,MAAO,OAIxCb,EAFDJ,EAAMiB,EAAM,IAEC,MAAO,GAEpBI,GAASrB,EAAIE,SAAS,KAGtBoB,EAAa,IAFjBH,OAAcrC,IAARqC,EAAqBE,EAAQ,EAAIrB,EAAIP,MAAM,KAAK,GAAGC,OAAUyB,GAE9CnC,KAAKL,MAAMqB,GAAO,IAAKqB,EAAQrB,EAAqBrB,GAAMqB,EAAU,GAAImB,GAAO,IAA5C1B,MAAM,KAAK,GAEnEO,EAAMrB,GAAMqB,EAAU,GAAImB,GAAO,GAGjCI,IADIA,EAAa,GAAPJ,GAAYE,EAAQ,GAAKrB,EAAIP,MAAM,KAAK,KAC/B,IAAIU,OAAOgB,EAAK,GAC/BK,GAAON,EAAcI,EAAIG,QAAQ,uBAAwB,KAAOH,IAAQC,EAAI7B,OAAS,IAAM6B,EAAM,WAC9FH,EAAOrC,OAAOyC,GAAKA,GHX1BpB,MAAAA,EACAsB,SIVa,SAAXA,EAAqBvC,EAAGC,EAAGC,UACtBqB,MAAMC,QAAQxB,GAAMA,EAAEO,OAASP,EAAEyB,OAAO,SAACC,EAAGC,UAAMY,EAASb,EAAGC,EAAG1B,IAAI,GAAK,EAAKH,EAAK,EAAGE,EAAGC,EAAGC,IJUpGV,MAAAA,EACAgD,SKZa,SAAXA,EAAqBxC,EAAGC,EAAGC,UACtBqB,MAAMC,QAAQxB,GAAMA,EAAEO,OAASP,EAAEyB,OAAO,SAACC,EAAGC,UAAMa,EAASd,EAAGC,EAAG1B,KAAM,EAAKH,EAAK,EAAGE,EAAGC,EAAGC,ILYjGuC,UMfc,SAAAC,SACW,iBAAXA,IAAwBvB,MAAMuB,IAAWA,EAAS,GAAM,GNetEC,aOdkB,SAAS3C,EAAGC,OAC1B2C,EAAM,GACNC,EAAO,MACX7C,EAAIA,EAAEM,MAAM,IACZL,EAAIA,EAAEK,MAAM,IACLN,EAAEO,QAAUN,EAAEM,QAAUsC,GAG3BD,GADAC,KAAU7C,EAAE8C,QAAU7C,EAAE6C,OACV,GAAMF,EACpBC,EAAc,EAAPA,SAEJD,EAAIN,QAAQ,MAAO"}