{"version":3,"file":"index.js","sources":["../../../src/lib/object/merge.js","../../../src/lib/base/getType.js","../../../src/lib/base/isType.js","../../../src/lib/base/isEquals.js","../../../src/lib/object/index.js","../../../src/lib/object/clone.js","../../../src/lib/object/deepClone.js","../../../src/lib/object/findKey.js","../../../src/lib/object/convertKey.js","../../../src/lib/object/get.js","../../../src/lib/object/objectRebuild.js"],"sourcesContent":["/**\r\n * 合并两个对象\r\n * @param { Object } f : 需要合并的第一个对象\r\n * @param { Object } s ：需要合并的第二个对象\r\n * @return Object 合并后的对象\r\n */\r\nconst baseMerge = function (f, s) {\r\n    for (var i in s) {\r\n        f[i] = f[i] && f[i].toString() === '[object Object]' ? merge(f[i], s[i]) : (f[i] = s[i])\r\n    }\r\n    return f\r\n}\r\nconst merge = function () {\r\n    return Array.from(arguments).reduce((p, c) => baseMerge(p, c), {})\r\n}\r\nexport default merge\r\n","/**\r\n * @description: 获取数据类型\r\n * @param {*} value : 传入的值\r\n */\r\nconst getType = function getType(value) {\r\n    return Object.prototype.toString.call(value).slice(8, -1).toLowerCase()\r\n}\r\nexport default getType\r\n","import getType from \"./getType\";\r\n/**\r\n * @description: 判断传入的值和类型 是否匹配\r\n * @param  {*} value ：传入的值\r\n * @param  {String} type ：传入的类型\r\n * @return {Boolean} false 或 true\r\n */\r\nconst isType = function (val, type) {\r\n    return getType(val) === type\r\n}\r\nexport default isType\r\n","/**\r\n * @param {any} a：比较的值\r\n * @param {any} b：其他要比较的值\r\n */\r\nconst isEquals = function (a, b) {\r\n    if (a === b) return true\r\n    if (a instanceof Date && b instanceof Date) return a.getTime() === b.getTime()\r\n    if (!a || !b || (typeof a !== 'object' && typeof b !== 'object')) return a === b\r\n    if (a.prototype !== b.prototype) return false\r\n    let keys = Object.keys(a)\r\n    if (keys.length !== Object.keys(b).length) return false\r\n    let type = o => Object.prototype.toString.call(o).slice(8, -1)\r\n    return ((Array.isArray(a) && Array.isArray(b)) || (type(a) == 'Object' && type(b) == 'Object')) && keys.every(k => isEquals(a[k], b[k]))\r\n}\r\nexport default isEquals\r\n","import merge from './merge'\r\nimport clone from './clone'\r\nimport deepClone from './deepClone'\r\nimport findKey from './findKey'\r\nimport convertKey from './convertKey'\r\nimport get from './get'\r\nimport objectRebuild from './objectRebuild'\r\n\r\nexport default {\r\n    merge,\r\n    clone,\r\n    deepClone,\r\n    findKey,\r\n    convertKey,\r\n    get,\r\n    objectRebuild\r\n}\r\n","/**\r\n * 浅拷贝\r\n * @param {*} p\r\n */\r\nconst clone = function (p) {\r\n    var o = {}\r\n    for (var i in p) {\r\n        o[i] = p[i]\r\n    }\r\n    return o\r\n}\r\nexport default clone\r\n","import isType from '../base/isType'\r\n\r\n/**\r\n * deep clone\r\n * @param  {[type]} parent object 需要进行克隆的对象\r\n * @return {[type]}        深克隆后的对象\r\n */\r\nconst clone = parent => {\r\n    // 维护两个储存循环引用的数组\r\n    const parents = []\r\n    const children = []\r\n    const _clone = parent => {\r\n        if (parent === null) return null\r\n        if (typeof parent !== 'object') return parent\r\n\r\n        let child, proto\r\n\r\n        if (isType(parent, 'array')) {\r\n            // 对数组做特殊处理\r\n            child = []\r\n        } else if (isType(parent, 'regexp')) {\r\n            // 对正则对象做特殊处理\r\n            child = new RegExp(parent.source, getRegExp(parent))\r\n            if (parent.lastIndex) child.lastIndex = parent.lastIndex\r\n        } else if (isType(parent, 'date')) {\r\n            // 对Date对象做特殊处理\r\n            child = new Date(parent.getTime())\r\n        } else {\r\n            // 处理对象原型\r\n            proto = Object.getPrototypeOf(parent)\r\n            // 利用Object.create切断原型链\r\n            child = Object.create(proto)\r\n        }\r\n\r\n        // 处理循环引用\r\n        const index = parents.indexOf(parent)\r\n\r\n        if (index !== -1) {\r\n            // 如果父数组存在本对象,说明之前已经被引用过,直接返回此对象\r\n            return children[index]\r\n        }\r\n        parents.push(parent)\r\n        children.push(child)\r\n\r\n        for (const i in parent) {\r\n            // 递归\r\n            child[i] = _clone(parent[i])\r\n        }\r\n\r\n        return child\r\n    }\r\n    return _clone(parent)\r\n}\r\n\r\n/**\r\n * 对象深度克隆,\r\n * JSON.stringify深度克隆对象\r\n * 无法对函数 、RegExp等特殊对象的克隆,\r\n * 会抛弃对象的constructor,所有的构造函数会指向Object\r\n * 对象有循环引用,会报错\r\n * @param {Object}  obj 克隆的对象\r\n */\r\nconst deepClone = obj => {\r\n    return clone(obj)\r\n}\r\nexport default deepClone\r\n","/*\r\n * @Author: your name\r\n * @Date: 2021-06-06 13:25:12\r\n * @LastEditTime: 2021-06-06 14:22:00\r\n * @LastEditors: Please set LastEditors\r\n * @Description: In User Settings Edit\r\n * @FilePath: \\rutils\\src\\lib\\object\\findKey.js\r\n */\r\nimport isEquals from '../base/isEquals'\r\nconst findKey = function (o, v) {\r\n    for (let k in o) {\r\n        if ((typeof v === 'function' && v(o[k])) || (Array.isArray(v) && o[k][v[0]] === v[1]) || (typeof v === 'string' && v in o[k]) || isEquals(o[k], v)) {\r\n            return k\r\n        }\r\n    }\r\n}\r\nexport default findKey\r\n","import getType from \"../base/getType\";\r\n\r\n/**\r\n * 转换Key\r\n * @param {Array|Object} obj 数据源\r\n * @param {Object} keyMap 映射关系\r\n * @param {Boolean} isDeep 是否为深度\r\n * @return {Array|Object}\r\n */\r\nconst convertKey = (obj, keyMap, isDeep) => {\r\n    if (![\"array\", \"object\"].includes(getType(obj))) {\r\n        throw new TypeError(\r\n            \"The first argument should be either an object or an array！\"\r\n        );\r\n    }\r\n    if (Object.prototype.toString.call(keyMap) !== \"[object Object]\") {\r\n        throw new TypeError(\"The parameter keyMap should be an object!\");\r\n    }\r\n    let res = Array.isArray(obj)  ? [] : {};\r\n    if (obj instanceof Object) {\r\n        for (let key in obj) {\r\n            let newKey = Object.keys(keyMap).includes(key) ? keyMap[key] : key;\r\n            res[newKey] = obj[key];\r\n\r\n            //是否为深度转换\r\n            if (\r\n                isDeep &&\r\n                [\"array\", \"object\"].includes(getType(obj[key])) &&\r\n                Object.keys(obj[key]).length\r\n            ) {\r\n                res[newKey] = convertKey(obj[key], keyMap, isDeep);\r\n            }\r\n        }\r\n    }\r\n    return res;\r\n};\r\n\r\nexport default convertKey;\r\n","/**\r\n * 获取数据\r\n * @param {Object|Array} source 资源\r\n * @param {Array|String} path 路径  例：user.job.name 或 [‘user’, 'job', 'name']\r\n * @param {*} defaultValue 默认值\r\n * @param {Boolean} isDeep 是否为深度\r\n * @return {*}\r\n */\r\nconst get = (source, path, defaultValue, isDeep) => {\r\n  try {\r\n    if (!source) return defaultValue\r\n    if (!path || (Array.isArray(path) && path.length === 0)) return defaultValue || source\r\n    var paths = Array.isArray(path) ? path : path.replace(/\\[(\\d+)\\]/g, '.$1').split('.')\r\n    var res = isDeep ? JSON.parse(JSON.stringify(source)) : source\r\n    var toNumber = function (d) {\r\n      return isNaN(Number(d)) ? d : Number(d)\r\n    }\r\n    for (var i = 0, len = paths.length; i < len; i++) {\r\n      var key = toNumber(paths[i])\r\n      res = res[key] // 记录当前的\r\n      if ([undefined].indexOf(res) > -1) {\r\n        return defaultValue\r\n      }\r\n    }\r\n    return res\r\n  } catch (e) {\r\n    return defaultValue\r\n  }\r\n}\r\n\r\nexport default get\r\n","/**\n * @description 对象组装\n * @param {Object} o 对象\n * @param {Object | Array} filter \n * @returns \n */\nexport default function objectRebuild(o,filter){\n    if(!filter)return o\n    if(Array.isArray(filter)){// 数组 string[] keys[]\n        return filter.reduce((p,c)=>(p[c] = o[c],p),{})\n    }else{// 对象 object keys{}\n        return Object.keys(o).reduce((p,c)=>{\n            if(filter[c]) p[filter[c]] = o[c]\n            return p\n        },{})\n    }\n}\n\n/**\n * \n *  示例：\n * \n * \n *      const obj = {a: 1, b: 2}\n\n        const keysObj = {\n            'a':'A1',\n        }\n\n    \n\n        function objectRebuild(o,filter){\n            if(!filter)return o\n            if(Array.isArray(filter)){// 数组 string[] keys[]\n                return filter.reduce((p,c)=>(p[c] = o[c],p),{})\n            }else{// 对象 object keys{}\n                return Object.keys(o).reduce((p,c)=>{\n                    if(filter[c]) p[filter[c]] = o[c]\n                    return p\n                },{})\n            }\n        }\n        console.log(objFmt(obj,keysObj))\n        console.log(objFmt(obj,['a','b1']))\n * \n * \n */"],"names":["merge","Array","from","arguments","reduce","f","s","i","toString","getType","value","Object","prototype","call","slice","toLowerCase","isType","val","type","isEquals","a","b","Date","getTime","_typeof","keys","length","isArray","every","k","o","clone","p","deepClone","obj","parents","children","_clone","parent","child","RegExp","source","getRegExp","lastIndex","proto","getPrototypeOf","create","index","indexOf","push","findKey","v","convertKey","keyMap","isDeep","includes","TypeError","res","key","newKey","get","path","defaultValue","paths","replace","split","JSON","parse","stringify","len","d","isNaN","Number","undefined","e","objectRebuild","filter","c"],"mappings":"4LAMA,IAMMA,EAAQ,kBACHC,MAAMC,KAAKC,WAAWC,OAPf,SAAUC,EAAGC,OACtB,IAAIC,KAAKD,EACVD,EAAEE,GAAKF,EAAEE,IAA0B,oBAApBF,EAAEE,GAAGC,WAAmCR,EAAMK,EAAEE,GAAID,EAAEC,IAAOF,EAAEE,GAAKD,EAAEC,UAElFF,GAGwD,0OCTnD,SAAVI,EAA2BC,UACtBC,OAAOC,UAAUJ,SAASK,KAAKH,GAAOI,MAAM,GAAI,GAAGC,cCE/C,SAATC,EAAmBC,EAAKC,UACnBT,EAAQQ,KAASC,ECJX,SAAXC,EAAqBC,EAAGC,MACtBD,IAAMC,EAAG,OAAO,KAChBD,aAAaE,MAAQD,aAAaC,KAAM,OAAOF,EAAEG,YAAcF,EAAEE,cAChEH,IAAMC,GAAmB,WAAbG,EAAOJ,IAA+B,WAAbI,EAAOH,GAAiB,OAAOD,IAAMC,KAC3ED,EAAER,YAAcS,EAAET,UAAW,OAAO,MACpCa,EAAOd,OAAOc,KAAKL,UACnBK,EAAKC,SAAWf,OAAOc,KAAKJ,GAAGK,UAE1BzB,MAAM0B,QAAQP,IAAMnB,MAAM0B,QAAQN,IAAmB,UAAXH,EAAKE,IAA6B,UAAXF,EAAKG,KAAoBI,EAAKG,MAAM,SAAAC,UAAKV,EAASC,EAAES,GAAIR,EAAEQ,OADzH,SAAPX,EAAOY,UAAKnB,OAAOC,UAAUJ,SAASK,KAAKiB,GAAGhB,MAAM,GAAI,UCHjD,CACXd,MAAAA,EACA+B,MCNU,SAAUC,OAEXzB,EADLuB,EAAI,OACCvB,KAAKyB,EACVF,EAAEvB,GAAKyB,EAAEzB,UAENuB,GDEPG,UEmDc,SAAAC,UArDRC,EAAU,GACVC,EAAW,GACF,SAATC,EAASC,MACI,OAAXA,EAAiB,OAAO,QACN,WAAlBd,EAAOc,GAAqB,OAAOA,MAEnCC,EAEAvB,EAAOsB,EAAQ,SAEfC,EAAQ,GACDvB,EAAOsB,EAAQ,WAEtBC,EAAQ,IAAIC,OAAOF,EAAOG,OAAQC,UAAUJ,IACxCA,EAAOK,YAAWJ,EAAMI,UAAYL,EAAOK,YAG/CJ,EAFOvB,EAAOsB,EAAQ,QAEd,IAAIhB,KAAKgB,EAAOf,YAGxBqB,EAAQjC,OAAOkC,eAAeP,GAEtB3B,OAAOmC,OAAOF,QAafrC,EATLwC,EAAQZ,EAAQa,QAAQV,OAEf,IAAXS,SAEOX,EAASW,OAKTxC,KAHX4B,EAAQc,KAAKX,GACbF,EAASa,KAAKV,GAEED,EAEZC,EAAMhC,GAAK8B,EAAOC,EAAO/B,WAGtBgC,EAEJF,CAYMH,GAxDH,IAEJC,EACAC,GFENc,QGHY,SAAUpB,EAAGqB,OACpB,IAAItB,KAAKC,KACQ,mBAANqB,GAAoBA,EAAErB,EAAED,KAAS5B,MAAM0B,QAAQwB,IAAMrB,EAAED,GAAGsB,EAAE,MAAQA,EAAE,IAAqB,iBAANA,GAAkBA,KAAKrB,EAAED,IAAOV,EAASW,EAAED,GAAIsB,UACrItB,GHCfuB,WIJe,SAAbA,EAAclB,EAAKmB,EAAQC,OACxB,CAAC,QAAS,UAAUC,SAAS9C,EAAQyB,UAChC,IAAIsB,UACN,iEAGuC,oBAA3C7C,OAAOC,UAAUJ,SAASK,KAAKwC,SACzB,IAAIG,UAAU,iDAEpBC,EAAMxD,MAAM0B,QAAQO,GAAQ,GAAK,MACjCA,aAAevB,WACV,IAAI+C,KAAOxB,EAAK,KACbyB,EAAShD,OAAOc,KAAK4B,GAAQE,SAASG,GAAOL,EAAOK,GAAOA,EAC/DD,EAAIE,GAAUzB,EAAIwB,GAIdJ,GACA,CAAC,QAAS,UAAUC,SAAS9C,EAAQyB,EAAIwB,MACzC/C,OAAOc,KAAKS,EAAIwB,IAAMhC,SAEtB+B,EAAIE,GAAUP,EAAWlB,EAAIwB,GAAML,EAAQC,WAIhDG,GJpBPG,IKNQ,SAACnB,EAAQoB,EAAMC,EAAcR,WAEhCb,EAAQ,OAAOqB,MACfD,GAAS5D,MAAM0B,QAAQkC,IAAyB,IAAhBA,EAAKnC,OAAe,OAAOoC,GAAgBrB,UAC5EsB,EAAQ9D,MAAM0B,QAAQkC,GAAQA,EAAOA,EAAKG,QAAQ,aAAc,OAAOC,MAAM,KAC7ER,EAAMH,EAASY,KAAKC,MAAMD,KAAKE,UAAU3B,IAAWA,EAI/ClC,EAAI,EAAG8D,EAAMN,EAAMrC,OAAQnB,EAAI8D,EAAK9D,IAAK,CAEhDkD,EAAMA,EALiBa,EAIJP,EAAMxD,GAHlBgE,MAAMC,OAAOF,IAAMA,EAAIE,OAAOF,QAKL,EAA5B,MAACG,GAAWzB,QAAQS,UACfK,SAGJL,EACP,MAAOiB,UACAZ,EAZQ,IAAUQ,GLCzBK,cMTW,SAAuB7C,EAAE8C,UAChCA,EACD3E,MAAM0B,QAAQiD,GACNA,EAAOxE,OAAO,SAAC4B,EAAE6C,UAAK7C,EAAE6C,GAAK/C,EAAE+C,GAAG7C,GAAG,IAErCrB,OAAOc,KAAKK,GAAG1B,OAAO,SAAC4B,EAAE6C,UACzBD,EAAOC,KAAI7C,EAAE4C,EAAOC,IAAM/C,EAAE+C,IACxB7C,GACT,IAPYF"}