{"version":3,"file":"index.js","sources":["../../../src/lib/base/getType.js","../../../src/lib/base/index.js","../../../src/lib/base/isEmpty.js","../../../src/lib/base/isEquals.js","../../../src/lib/base/isArray.js","../../../src/lib/base/isBoolean.js","../../../src/lib/base/isDate.js","../../../src/lib/base/isFunction.js","../../../src/lib/base/isNull.js","../../../src/lib/base/isNumber.js","../../../src/lib/base/isObject.js","../../../src/lib/base/isRegExp.js","../../../src/lib/base/isString.js","../../../src/lib/base/isType.js","../../../src/lib/base/isUndefined.js"],"sourcesContent":["/**\r\n * @description: 获取数据类型\r\n * @param {*} value : 传入的值\r\n */\r\nconst getType = function getType(value) {\r\n    return Object.prototype.toString.call(value).slice(8, -1).toLowerCase()\r\n}\r\nexport default getType\r\n","// base\r\nimport isEmpty from './isEmpty'\r\nimport isEquals from './isEquals'\r\nimport isArray from './isArray'\r\nimport isBoolean from './isBoolean'\r\nimport isDate from './isDate'\r\nimport isFunction from './isFunction'\r\nimport isNull from './isNull'\r\nimport isNumber from './isNumber'\r\nimport isObject from './isObject'\r\nimport isRegExp from './isRegExp'\r\nimport isString from './isString'\r\nimport isType from './isType'\r\nimport isUndefined from './isUndefined'\r\nimport getType from './getType'\r\n\r\nexport default {\r\n    isEmpty,\r\n    isEquals,\r\n    isArray,\r\n    isBoolean,\r\n    isDate,\r\n    isFunction,\r\n    isNull,\r\n    isNumber,\r\n    isObject,\r\n    isRegExp,\r\n    isString,\r\n    isType,\r\n    isUndefined,\r\n    getType\r\n}\r\n","//检查 `value` 是否可能是原型对象。\r\nconst isPrototype = function (value) {\r\n    const objectProto = Object.prototype\r\n    const Ctor = value && value.constructor\r\n    const proto = (typeof Ctor === 'function' && Ctor.prototype) || objectProto\r\n    return value === proto\r\n}\r\n// 是否有长度\r\nconst isLength = function (value) {\r\n    const MAX_SAFE_INTEGER = 9007199254740991 // 2**53-1\r\n    return typeof value === 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER\r\n}\r\nconst isArrayLike = function (value) {\r\n    return value != null && typeof value !== 'function' && isLength(value.length)\r\n}\r\nconst getType = function (o) {\r\n    return Object.prototype.toString.call(o).slice(8, -1).toLowerCase()\r\n}\r\nconst isObjectLike = function (value) {\r\n    return typeof value === 'object' && value !== null\r\n}\r\nconst isArguments = function (value) {\r\n    return isObjectLike(value) && getType(value) == 'arguments'\r\n}\r\n\r\n/**\r\n * @param {Array|Object|string} value：要检查的值\r\n */\r\nconst isEmpty = function (value) {\r\n    if (value == null) return true\r\n    if (isArrayLike(value)) {\r\n        try {\r\n            return !value.length\r\n        } catch (e) {}\r\n    }\r\n\r\n    if (['map', 'set'].includes(getType(value))) return !value.size\r\n    if (isPrototype(value)) return !Object.keys(value).length\r\n    const hasOwnProperty = Object.prototype.hasOwnProperty\r\n    for (const key in value) {\r\n        if (hasOwnProperty.call(value, key)) return false\r\n    }\r\n    return true\r\n}\r\nexport default isEmpty\r\n","/**\r\n * @param {any} a：比较的值\r\n * @param {any} b：其他要比较的值\r\n */\r\nconst isEquals = function (a, b) {\r\n    if (a === b) return true\r\n    if (a instanceof Date && b instanceof Date) return a.getTime() === b.getTime()\r\n    if (!a || !b || (typeof a !== 'object' && typeof b !== 'object')) return a === b\r\n    if (a.prototype !== b.prototype) return false\r\n    let keys = Object.keys(a)\r\n    if (keys.length !== Object.keys(b).length) return false\r\n    let type = o => Object.prototype.toString.call(o).slice(8, -1)\r\n    return ((Array.isArray(a) && Array.isArray(b) && a.length===b.length) || (type(a) == 'Object' && type(b) == 'Object')) && keys.every(k => isEquals(a[k], b[k]))\r\n}\r\nexport default isEquals\r\n","/**\r\n * @description: 判断传入的值是否是数组类型\r\n * @param  {*} value ：传入的值\r\n * @return {Boolean} false 或 true\r\n */\r\nconst isArray = function (value) {\r\n    return Array.isArray(value)\r\n}\r\nexport default isArray\r\n","/**\r\n * @description: 判断传入的值是否是布尔类型\r\n * @param  {*} value ：传入的值\r\n * @return {Boolean} false 或 true\r\n */\r\nconst isBoolean = function (value) {\r\n    return typeof value === 'boolean'\r\n}\r\nexport default isBoolean\r\n","import getType from './getType'\r\n/**\r\n * @description: 判断传入的值是否是日期类型\r\n * @param  {*} value ：传入的值\r\n * @return {Boolean} false 或 true\r\n */\r\nconst isDate = function (value) {\r\n    return getType(value) === 'date'\r\n}\r\nexport default isDate\r\n","/**\r\n * @description: 判断传入的值是否是函数类型\r\n * @param  {*} value ：传入的值\r\n * @return {Boolean} false 或 true\r\n */\r\nconst isFunction = function (value) {\r\n    return typeof value === 'function'\r\n}\r\nexport default isFunction\r\n","/**\r\n * @description: 判断传入的值是否是Null类型\r\n * @param  {*} value ：传入的值\r\n * @return {Boolean} false 或 true\r\n */\r\nconst isNull = function (value) {\r\n    return value === null\r\n}\r\nexport default isNull\r\n","// 是否是数字类型\r\nfunction isNumber(value) {\r\n    return typeof value === 'number'\r\n}\r\nexport default isNumber\r\n","import getType from './getType'\r\n/*\r\n * @Description:isObject 是否是对象类型\r\n *\r\n * isObject({}) // true\r\n * isObject(null) // false\r\n *\r\n */\r\nfunction isObject(o) {\r\n    return getType(o) === 'object'\r\n}\r\nexport default isObject\r\n","import getType from './getType'\r\n\r\n// 是否正则类型\r\nconst isRegExp = function (o) {\r\n    return getType(o) === 'regexp'\r\n}\r\nexport default isRegExp\r\n","/**\r\n * @description: 判断传入的值是否是字符串类型\r\n * @param  {*} value ：传入的值\r\n * @return {Boolean} false 或 true\r\n */\r\nconst isString = function (value) {\r\n    return typeof value === 'string'\r\n}\r\nexport default isString\r\n","import getType from \"./getType\";\r\n/**\r\n * @description: 判断传入的值和类型 是否匹配\r\n * @param  {*} value ：传入的值\r\n * @param  {String} type ：传入的类型\r\n * @return {Boolean} false 或 true\r\n */\r\nconst isType = function (val, type) {\r\n    return getType(val) === type\r\n}\r\nexport default isType\r\n","/**\r\n * @description: 判断传入的值是否是undefined类型\r\n * @param  {*} value ：传入的值\r\n * @return {Boolean} false 或 true\r\n */\r\nconst isUndefined = function (value) {\r\n    return typeof value === 'undefined'\r\n}\r\nexport default isUndefined\r\n"],"names":["getType","value","Object","prototype","toString","call","slice","toLowerCase","isEmpty","length","e","objectProto","Ctor","includes","o","size","constructor","keys","key","hasOwnProperty","isEquals","a","b","Date","getTime","_typeof","type","Array","isArray","every","k","isBoolean","isDate","isFunction","isNull","isNumber","isObject","isRegExp","isString","isType","val","isUndefined"],"mappings":"+ZAIgB,SAAVA,EAA2BC,UACtBC,OAAOC,UAAUC,SAASC,KAAKJ,GAAOK,MAAM,GAAI,GAAGC,oBCW/C,CACXC,QCWY,SAAUP,MACT,MAATA,EAAe,OAAO,KAhBV,OADUA,EAkBVA,IAjByB,mBAAVA,IAHP,iBAFDA,EAKyCA,EAAMQ,UAHzB,EAATR,GAAcA,EAAQ,GAAK,GAAKA,GAD3C,6BAuBTA,EAAMQ,OAChB,MAAOC,IArBG,IAXUT,EACpBU,EACAC,KAiCF,CAAC,MAAO,OAAOC,UArBGC,EAqBcb,EApB7BC,OAAOC,UAAUC,SAASC,KAAKS,GAAGR,MAAM,GAAI,GAAGC,gBAoBT,OAAQN,EAAMc,QAnCjCd,EAoCVA,EAnCVU,EAAcT,OAAOC,UACrBS,EAAOX,GAASA,EAAMe,YAErBf,KADwB,mBAATW,GAAuBA,EAAKT,WAAcQ,GAiCxC,OAAQT,OAAOe,KAAKhB,GAAOQ,WAExCS,EADLC,EAAiBjB,OAAOC,UAAUgB,mBAC7BD,KAAOjB,KACVkB,EAAed,KAAKJ,EAAOiB,GAAM,OAAO,SAEzC,GDxBPE,SEda,SAAXA,EAAqBC,EAAGC,MACtBD,IAAMC,EAAG,OAAO,KAChBD,aAAaE,MAAQD,aAAaC,KAAM,OAAOF,EAAEG,YAAcF,EAAEE,cAChEH,IAAMC,GAAmB,WAAbG,EAAOJ,IAA+B,WAAbI,EAAOH,GAAiB,OAAOD,IAAMC,KAC3ED,EAAElB,YAAcmB,EAAEnB,UAAW,OAAO,MACpCc,EAAOf,OAAOe,KAAKI,MACnBJ,EAAKR,SAAWP,OAAOe,KAAKK,GAAGb,OAAQ,OAAO,EACvC,SAAPiB,EAAOZ,UAAKZ,OAAOC,UAAUC,SAASC,KAAKS,GAAGR,MAAM,GAAI,UACnDqB,MAAMC,QAAQP,IAAMM,MAAMC,QAAQN,IAAMD,EAAEZ,SAASa,EAAEb,QAAuB,UAAXiB,EAAKL,IAA6B,UAAXK,EAAKJ,KAAoBL,EAAKY,MAAM,SAAAC,UAAKV,EAASC,EAAES,GAAIR,EAAEQ,OFO3JF,QGdY,SAAU3B,UACf0B,MAAMC,QAAQ3B,IHcrB8B,UIfc,SAAU9B,SACA,kBAAVA,GJed+B,OKfW,SAAU/B,SACK,SAAnBD,EAAQC,ILefgC,WMjBe,SAAUhC,SACD,mBAAVA,GNiBdiC,OOlBW,SAAUjC,UACJ,OAAVA,GPkBPkC,SQvBJ,SAAkBlC,SACU,iBAAVA,GRuBdmC,SSjBJ,SAAkBtB,SACQ,WAAfd,EAAQc,ITiBfuB,SUvBa,SAAUvB,SACD,WAAfd,EAAQc,IVuBfwB,SWtBa,SAAUrC,SACC,iBAAVA,GXsBdsC,OYrBW,SAAUC,EAAKd,UACnB1B,EAAQwC,KAASd,GZqBxBe,YaxBgB,SAAUxC,eACF,IAAVA,GbwBdD,QAAAA"}